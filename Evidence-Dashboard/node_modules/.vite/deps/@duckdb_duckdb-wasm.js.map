{
  "version": 3,
  "sources": ["../../@duckdb/web-worker/cjs/browser.js", "../../@duckdb/duckdb-wasm/src/bindings/config.ts", "../../@duckdb/duckdb-wasm/src/bindings/tokens.ts", "../../@duckdb/duckdb-wasm/src/log.ts", "../../@duckdb/duckdb-wasm/src/status.ts", "../../@duckdb/duckdb-wasm/src/parallel/async_connection.ts", "../../@duckdb/duckdb-wasm/src/parallel/worker_request.ts", "../../@duckdb/duckdb-wasm/src/json_typedef.ts", "../../@duckdb/duckdb-wasm/src/parallel/async_bindings.ts", "../../@duckdb/duckdb-wasm/src/parallel/worker_dispatcher.ts", "../../@duckdb/wasm-feature-detect/dist/esm/index.js", "../../@duckdb/duckdb-wasm/package.json", "../../@duckdb/duckdb-wasm/src/version.ts", "../../@duckdb/duckdb-wasm/src/platform.ts", "../../@duckdb/duckdb-wasm/src/worker.ts", "../../@duckdb/duckdb-wasm/src/bindings/runtime.ts"],
  "sourcesContent": ["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;", "export interface DuckDBQueryConfig {\n    /**\n     * The polling interval for queries\n     */\n    queryPollingInterval?: number;\n    /**\n     * Cast BigInt to Double?\n     */\n    castBigIntToDouble?: boolean;\n    /**\n     * Cast Timestamp to Date64?\n     */\n    castTimestampToDate?: boolean;\n    /**\n     * Cast Timestamp to Date64?\n     */\n    castDurationToTime64?: boolean;\n    /**\n     * Cast Decimal to Double?\n     */\n    castDecimalToDouble?: boolean;\n}\n\nexport interface DuckDBFilesystemConfig {\n    /**\n     * Allow falling back to full HTTP reads if the server does not support range requests.\n     */\n    allowFullHTTPReads?: boolean;\n}\n\nexport enum DuckDBAccessMode {\n    UNDEFINED = 0,\n    AUTOMATIC = 1,\n    READ_ONLY = 2,\n    READ_WRITE = 3,\n}\n\nexport interface DuckDBConfig {\n    /**\n     * The database path\n     */\n    path?: string;\n    /**\n     * The access mode\n     */\n    accessMode?: DuckDBAccessMode;\n    /**\n     * The maximum number of threads.\n     * Note that this will only work with cross-origin isolated sites since it requires SharedArrayBuffers.\n     */\n    maximumThreads?: number;\n    /**\n     * The query config\n     */\n    query?: DuckDBQueryConfig;\n    /**\n     * The filesystem config\n     */\n    filesystem?: DuckDBFilesystemConfig;\n}\n", "export enum TokenType {\n    IDENTIFIER = 0,\n    NUMERIC_CONSTANT = 1,\n    STRING_CONSTANT = 2,\n    OPERATOR = 3,\n    KEYWORD = 4,\n    COMMENT = 5,\n}\n\nexport interface ScriptTokens {\n    offsets: number[];\n    types: TokenType[];\n}\n", "export enum LogLevel {\n    NONE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4,\n}\n\nexport enum LogTopic {\n    NONE = 0,\n    CONNECT = 1,\n    DISCONNECT = 2,\n    OPEN = 3,\n    QUERY = 4,\n    INSTANTIATE = 5,\n}\n\nexport enum LogEvent {\n    NONE = 0,\n    OK = 1,\n    ERROR = 2,\n    START = 3,\n    RUN = 4,\n    CAPTURE = 5,\n}\n\nexport enum LogOrigin {\n    NONE = 0,\n    WEB_WORKER = 1,\n    NODE_WORKER = 2,\n    BINDINGS = 3,\n    ASYNC_DUCKDB = 4,\n}\n\nexport type LogEntry<O, T, E, V> = {\n    readonly timestamp: Date;\n    readonly level: LogLevel;\n    readonly origin: O;\n    readonly topic: T;\n    readonly event: E;\n    readonly value: V;\n};\n\nexport type LogEntryVariant =\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.INSTANTIATE, LogEvent.ERROR, string>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\n\nexport interface Logger {\n    log(entry: LogEntryVariant): void;\n}\n\nexport class VoidLogger implements Logger {\n    public log(_entry: LogEntryVariant): void {}\n}\n\nexport class ConsoleLogger implements Logger {\n    constructor(protected level: LogLevel = LogLevel.INFO) {}\n    public log(entry: LogEntryVariant): void {\n        if (entry.level >= this.level) {\n            console.log(entry);\n        }\n    }\n}\n\nexport function getLogLevelLabel(level: LogLevel): string {\n    switch (level) {\n        case LogLevel.NONE:\n            return 'NONE';\n        case LogLevel.DEBUG:\n            return 'DEBUG';\n        case LogLevel.INFO:\n            return 'INFO';\n        case LogLevel.WARNING:\n            return 'WARNING';\n        case LogLevel.ERROR:\n            return 'ERROR';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogEventLabel(event: LogEvent): string {\n    switch (event) {\n        case LogEvent.NONE:\n            return 'NONE';\n        case LogEvent.OK:\n            return 'OK';\n        case LogEvent.ERROR:\n            return 'ERROR';\n        case LogEvent.START:\n            return 'START';\n        case LogEvent.RUN:\n            return 'RUN';\n        case LogEvent.CAPTURE:\n            return 'CAPTURE';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogTopicLabel(topic: LogTopic): string {\n    switch (topic) {\n        case LogTopic.CONNECT:\n            return 'CONNECT';\n        case LogTopic.DISCONNECT:\n            return 'DISCONNECT';\n        case LogTopic.INSTANTIATE:\n            return 'INSTANTIATE';\n        case LogTopic.OPEN:\n            return 'OPEN';\n        case LogTopic.QUERY:\n            return 'QUERY';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogOriginLabel(origin: LogOrigin): string {\n    switch (origin) {\n        case LogOrigin.NONE:\n            return 'NONE';\n        case LogOrigin.WEB_WORKER:\n            return 'WEB WORKER';\n        case LogOrigin.NODE_WORKER:\n            return 'NODE WORKER';\n        case LogOrigin.BINDINGS:\n            return 'DUCKDB BINDINGS';\n        case LogOrigin.ASYNC_DUCKDB:\n            return 'DUCKDB';\n        default:\n            return '?';\n    }\n}\n", "export enum StatusCode {\n    SUCCESS = 0,\n}\n", "import * as arrow from 'apache-arrow';\nimport { AsyncDuckDB } from './async_bindings';\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\n\n/** A thin helper to memoize the connection id */\nexport class AsyncDuckDBConnection {\n    /** The async duckdb */\n    protected readonly _bindings: AsyncDuckDB;\n    /** The conn handle */\n    protected readonly _conn: number;\n\n    constructor(bindings: AsyncDuckDB, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Access the database bindings */\n    public get bindings(): AsyncDuckDB {\n        return this._bindings;\n    }\n\n    /** Disconnect from the database */\n    public async close(): Promise<void> {\n        return this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const buffer = await this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync(), \"Reader is not sync\");\n        console.assert(reader.isFile(), \"Reader is not file\");\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a query */\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        let header = await this._bindings.startPendingQuery(this._conn, text);\n        while (header == null) {\n            header = await this._bindings.pollPendingQuery(this._conn);\n        }\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n\n    /** Cancel a query that was sent earlier */\n    public async cancelSent(): Promise<boolean> {\n        return await this._bindings.cancelPendingQuery(this._conn);\n    }\n\n    /** Get table names */\n    public async getTableNames(query: string): Promise<string[]> {\n        return await this._bindings.getTableNames(this._conn, query);\n    }\n\n    /** Create a prepared statement */\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<AsyncPreparedStatement> {\n        const stmt = await this._bindings.createPrepared(this._conn, text);\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert an arrow table */\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\n        const buffer = arrow.tableToIPC(table, 'stream');\n        await this.insertArrowFromIPCStream(buffer, options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n    /** Insert csv file from path */\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\n    }\n    /** Insert json file from path */\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\n    }\n}\n\n/** An async result stream iterator */\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\n    /** First chunk? */\n    protected _first: boolean;\n    /** Reached end of stream? */\n    protected _depleted: boolean;\n    /** In-flight */\n    protected _inFlight: Promise<Uint8Array> | null;\n\n    constructor(\n        protected readonly db: AsyncDuckDB,\n        protected readonly conn: number,\n        protected readonly header: Uint8Array,\n    ) {\n        this._first = true;\n        this._depleted = false;\n        this._inFlight = null;\n    }\n\n    async next(): Promise<IteratorResult<Uint8Array>> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        let buffer: Uint8Array;\n        if (this._inFlight != null) {\n            buffer = await this._inFlight;\n            this._inFlight = null;\n        } else {\n            buffer = await this.db.fetchQueryResults(this.conn);\n        }\n        this._depleted = buffer.length == 0;\n        if (!this._depleted) {\n            this._inFlight = this.db.fetchQueryResults(this.conn);\n        }\n        return {\n            done: this._depleted,\n            value: buffer,\n        };\n    }\n\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id */\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: AsyncDuckDB;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public async close() {\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n}\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { LogEntryVariant } from '../log';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { WebFile } from '../bindings/web_file';\nimport { InstantiationProgress } from '../bindings/progress';\nimport { DuckDBDataProtocol } from '../bindings';\n\nexport type ConnectionID = number;\nexport type StatementID = number;\n\nexport enum WorkerRequestType {\n    CANCEL_PENDING_QUERY = 'CANCEL_PENDING_QUERY',\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\n    CONNECT = 'CONNECT',\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\n    CREATE_PREPARED = 'CREATE_PREPARED',\n    DISCONNECT = 'DISCONNECT',\n    DROP_FILE = 'DROP_FILE',\n    DROP_FILES = 'DROP_FILES',\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\n    FLUSH_FILES = 'FLUSH_FILES',\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\n    GET_TABLE_NAMES = 'GET_TABLE_NAMES',\n    GET_VERSION = 'GET_VERSION',\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\n    INSTANTIATE = 'INSTANTIATE',\n    OPEN = 'OPEN',\n    PING = 'PING',\n    POLL_PENDING_QUERY = 'POLL_PENDING_QUERY',\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\n    RESET = 'RESET',\n    RUN_PREPARED = 'RUN_PREPARED',\n    RUN_QUERY = 'RUN_QUERY',\n    SEND_PREPARED = 'SEND_PREPARED',\n    START_PENDING_QUERY = 'START_PENDING_QUERY',\n    TOKENIZE = 'TOKENIZE',\n}\n\nexport enum WorkerResponseType {\n    CONNECTION_INFO = 'CONNECTION_INFO',\n    ERROR = 'ERROR',\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\n    FILE_BUFFER = 'FILE_BUFFER',\n    FILE_INFOS = 'FILE_INFOS',\n    FILE_SIZE = 'FILE_SIZE',\n    FILE_STATISTICS = 'FILE_STATISTICS',\n    INSTANTIATE_PROGRESS = 'INSTANTIATE_PROGRESS',\n    LOG = 'LOG',\n    OK = 'OK',\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\n    QUERY_PLAN = 'QUERY_PLAN',\n    QUERY_RESULT = 'QUERY_RESULT',\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\n    QUERY_RESULT_HEADER = 'QUERY_RESULT_HEADER',\n    QUERY_RESULT_HEADER_OR_NULL = 'QUERY_RESULT_HEADER_OR_NULL',\n    REGISTERED_FILE = 'REGISTERED_FILE',\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\n    SUCCESS = 'SUCCESS',\n    TABLE_NAMES = 'TABLE_NAMES',\n    VERSION_STRING = 'VERSION_STRING',\n}\n\nexport type WorkerRequest<T, P> = {\n    readonly messageId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerResponse<T, P> = {\n    readonly messageId: number;\n    readonly requestId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\n\nexport class WorkerTask<T, D, P> {\n    readonly type: T;\n    readonly data: D;\n    promise: Promise<P>;\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\n    promiseRejecter: (value: any) => void = () => {};\n\n    constructor(type: T, data: D) {\n        this.type = type;\n        this.data = data;\n        this.promise = new Promise<P>(\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\n                this.promiseResolver = resolve;\n                this.promiseRejecter = reject;\n            },\n        );\n    }\n}\n\nexport type WorkerRequestVariant =\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\n    | WorkerRequest<WorkerRequestType.CANCEL_PENDING_QUERY, number>\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\n    | WorkerRequest<WorkerRequestType.GET_TABLE_NAMES, [number, string]>\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\n    | WorkerRequest<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined]\n      >\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\n    | WorkerRequest<WorkerRequestType.PING, null>\n    | WorkerRequest<WorkerRequestType.POLL_PENDING_QUERY, number>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean]>\n    | WorkerRequest<WorkerRequestType.RESET, null>\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.START_PENDING_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\n\nexport type WorkerResponseVariant =\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\n    | WorkerResponse<WorkerResponseType.ERROR, any>\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\n    | WorkerResponse<WorkerResponseType.INSTANTIATE_PROGRESS, InstantiationProgress>\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\n    | WorkerResponse<WorkerResponseType.OK, null>\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL, Uint8Array | null>\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\n    | WorkerResponse<WorkerResponseType.TABLE_NAMES, string[]>\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\n\nexport type WorkerTaskVariant =\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, null>\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\n    | WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\n    | WorkerTask<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined],\n          null\n      >\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\n    | WorkerTask<WorkerRequestType.PING, null, null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean], null>\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\n    | WorkerTask<WorkerRequestType.RESET, null, null>\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>\n    | WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>\n    | WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\n", "import * as arrow from 'apache-arrow';\n\nexport interface SQLType {\n    /// The sql type\n    sqlType: string;\n    /// Is nullable?\n    nullable?: boolean;\n    /// Decimal precision\n    precision?: number;\n    /// Decimal scaling\n    scale?: number;\n    /// Timezone\n    timezone?: string;\n    /// Byte width (FixedSizeBinary)\n    byteWidth?: number;\n    /// Key type\n    keyType?: SQLType;\n    /// Value type\n    valueType?: SQLType;\n    /// Fields\n    fields?: SQLField[];\n}\n\nexport function arrowToSQLType(type: arrow.DataType): SQLType {\n    switch (type.typeId) {\n        case arrow.Type.Binary:\n            return { sqlType: 'binary' };\n        case arrow.Type.Bool:\n            return { sqlType: 'bool' };\n        case arrow.Type.Date:\n            return { sqlType: 'date' };\n        case arrow.Type.DateDay:\n            return { sqlType: 'date32[d]' };\n        case arrow.Type.DateMillisecond:\n            return { sqlType: 'date64[ms]' };\n        case arrow.Type.Decimal: {\n            const dec = type as arrow.Decimal;\n            return { sqlType: 'decimal', precision: dec.precision, scale: dec.scale };\n        }\n        case arrow.Type.Float:\n            return { sqlType: 'float' };\n        case arrow.Type.Float16:\n            return { sqlType: 'float16' };\n        case arrow.Type.Float32:\n            return { sqlType: 'float32' };\n        case arrow.Type.Float64:\n            return { sqlType: 'float64' };\n        case arrow.Type.Int:\n            return { sqlType: 'int32' };\n        case arrow.Type.Int16:\n            return { sqlType: 'int16' };\n        case arrow.Type.Int32:\n            return { sqlType: 'int32' };\n        case arrow.Type.Int64:\n            return { sqlType: 'int64' };\n        case arrow.Type.Uint16:\n            return { sqlType: 'uint16' };\n        case arrow.Type.Uint32:\n            return { sqlType: 'uint32' };\n        case arrow.Type.Uint64:\n            return { sqlType: 'uint64' };\n        case arrow.Type.Uint8:\n            return { sqlType: 'uint8' };\n        case arrow.Type.IntervalDayTime:\n            return { sqlType: 'interval[dt]' };\n        case arrow.Type.IntervalYearMonth:\n            return { sqlType: 'interval[m]' };\n        case arrow.Type.List: {\n            const list = type as arrow.List;\n            return {\n                sqlType: 'list',\n                valueType: arrowToSQLType(list.valueType),\n            };\n        }\n        case arrow.Type.FixedSizeBinary: {\n            const bin = type as arrow.FixedSizeBinary;\n            return { sqlType: 'fixedsizebinary', byteWidth: bin.byteWidth };\n        }\n        case arrow.Type.Null:\n            return { sqlType: 'null' };\n        case arrow.Type.Utf8:\n            return { sqlType: 'utf8' };\n        case arrow.Type.Struct: {\n            const struct_ = type as arrow.Struct;\n            return {\n                sqlType: 'struct',\n                fields: struct_.children.map(c => arrowToSQLField(c.name, c.type)),\n            };\n        }\n        case arrow.Type.Map: {\n            const map_ = type as arrow.Map_;\n            return {\n                sqlType: 'map',\n                keyType: arrowToSQLType(map_.keyType),\n                valueType: arrowToSQLType(map_.valueType),\n            };\n        }\n        case arrow.Type.Time:\n            return { sqlType: 'time[s]' };\n        case arrow.Type.TimeMicrosecond:\n            return { sqlType: 'time[us]' };\n        case arrow.Type.TimeMillisecond:\n            return { sqlType: 'time[ms]' };\n        case arrow.Type.TimeNanosecond:\n            return { sqlType: 'time[ns]' };\n        case arrow.Type.TimeSecond:\n            return { sqlType: 'time[s]' };\n        case arrow.Type.Timestamp: {\n            const ts = type as arrow.Timestamp;\n            return { sqlType: 'timestamp', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampSecond: {\n            const ts = type as arrow.TimestampSecond;\n            return { sqlType: 'timestamp[s]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMicrosecond: {\n            const ts = type as arrow.TimestampMicrosecond;\n            return { sqlType: 'timestamp[us]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampNanosecond: {\n            const ts = type as arrow.TimestampNanosecond;\n            return { sqlType: 'timestamp[ns]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMillisecond: {\n            const ts = type as arrow.TimestampMillisecond;\n            return { sqlType: 'timestamp[ms]', timezone: ts.timezone || undefined };\n        }\n    }\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\n}\n\nexport type SQLField = SQLType & { name: string };\n\nexport function arrowToSQLField(name: string, type: arrow.DataType): SQLField {\n    const t = arrowToSQLType(type) as SQLField;\n    t.name = name;\n    return t;\n}\n", "import {\n    WorkerRequestType,\n    WorkerResponseType,\n    WorkerResponseVariant,\n    WorkerTaskVariant,\n    WorkerTask,\n    ConnectionID,\n    WorkerTaskReturnType,\n} from './worker_request';\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\nimport { Logger } from '../log';\nimport { AsyncDuckDBConnection } from './async_connection';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { InstantiationProgress } from '../bindings/progress';\nimport { arrowToSQLField } from '../json_typedef';\nimport { WebFile } from '../bindings/web_file';\nimport { DuckDBDataProtocol } from '../bindings';\n\nconst TEXT_ENCODER = new TextEncoder();\n\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\n    /** The message handler */\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\n    /** The error handler */\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\n    /** The close handler */\n    protected readonly _onCloseHandler: () => void;\n\n    /** Instantiate the module */\n    protected _onInstantiationProgress: ((p: InstantiationProgress) => void)[] = [];\n\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** The worker */\n    protected _worker: Worker | null = null;\n    /** The promise for the worker shutdown */\n    protected _workerShutdownPromise: Promise<null> | null = null;\n    /** Make the worker as terminated */\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\n\n    /** The next message id */\n    protected _nextMessageId = 0;\n    /** The pending requests */\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\n\n    constructor(logger: Logger, worker: Worker | null = null) {\n        this._logger = logger;\n        this._onMessageHandler = this.onMessage.bind(this);\n        this._onErrorHandler = this.onError.bind(this);\n        this._onCloseHandler = this.onClose.bind(this);\n        if (worker != null) this.attach(worker);\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n\n    /** Attach to worker */\n    protected attach(worker: Worker): void {\n        this._worker = worker;\n        this._worker.addEventListener('message', this._onMessageHandler);\n        this._worker.addEventListener('error', this._onErrorHandler);\n        this._worker.addEventListener('close', this._onCloseHandler);\n        this._workerShutdownPromise = new Promise<null>(\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\n                this._workerShutdownResolver = resolve;\n            },\n        );\n    }\n\n    /** Detach from worker */\n    public detach(): void {\n        if (!this._worker) return;\n        this._worker.removeEventListener('message', this._onMessageHandler);\n        this._worker.removeEventListener('error', this._onErrorHandler);\n        this._worker.removeEventListener('close', this._onCloseHandler);\n        this._worker = null;\n        this._workerShutdownResolver(null);\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Kill the worker */\n    public async terminate(): Promise<void> {\n        if (!this._worker) return;\n        this._worker.terminate();\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\n        this._worker = null;\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Post a task */\n    protected async postTask<W extends WorkerTaskVariant>(\n        task: W,\n        transfer: ArrayBuffer[] = [],\n    ): Promise<WorkerTaskReturnType<W>> {\n        if (!this._worker) {\n            console.error('cannot send a message since the worker is not set!');\n            return undefined as any;\n        }\n        const mid = this._nextMessageId++;\n        this._pendingRequests.set(mid, task);\n        this._worker.postMessage(\n            {\n                messageId: mid,\n                type: task.type,\n                data: task.data,\n            },\n            transfer,\n        );\n        return (await task.promise) as WorkerTaskReturnType<W>;\n    }\n\n    /** Received a message */\n    protected onMessage(event: MessageEvent): void {\n        // Unassociated responses?\n        const response = event.data as WorkerResponseVariant;\n        switch (response.type) {\n            // Request failed?\n            case WorkerResponseType.LOG: {\n                this._logger.log(response.data);\n                return;\n            }\n            // Call progress callback\n            case WorkerResponseType.INSTANTIATE_PROGRESS: {\n                for (const p of this._onInstantiationProgress) {\n                    p(response.data);\n                }\n                return;\n            }\n        }\n\n        // Get associated task\n        const task = this._pendingRequests.get(response.requestId);\n        if (!task) {\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\n            return;\n        }\n        this._pendingRequests.delete(response.requestId);\n\n        // Request failed?\n        if (response.type == WorkerResponseType.ERROR) {\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n            const e = new Error(response.data.message);\n            e.name = response.data.name;\n            if (Object.getOwnPropertyDescriptor(e, 'stack')?.writable) {\n                e.stack = response.data.stack;\n            }\n            task.promiseRejecter(e);\n            return;\n        }\n\n        // Otherwise differentiate between the tasks first\n        switch (task.type) {\n            case WorkerRequestType.CLOSE_PREPARED:\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\n            case WorkerRequestType.COPY_FILE_TO_PATH:\n            case WorkerRequestType.DISCONNECT:\n            case WorkerRequestType.DROP_FILE:\n            case WorkerRequestType.DROP_FILES:\n            case WorkerRequestType.FLUSH_FILES:\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\n            case WorkerRequestType.OPEN:\n            case WorkerRequestType.PING:\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\n            case WorkerRequestType.REGISTER_FILE_URL:\n            case WorkerRequestType.RESET:\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.INSTANTIATE:\n                this._onInstantiationProgress = [];\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GLOB_FILE_INFOS:\n                if (response.type == WorkerResponseType.FILE_INFOS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_VERSION:\n                if (response.type == WorkerResponseType.VERSION_STRING) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_FEATURE_FLAGS:\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_TABLE_NAMES:\n                if (response.type == WorkerResponseType.TABLE_NAMES) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.TOKENIZE:\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CONNECT:\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.RUN_PREPARED:\n            case WorkerRequestType.RUN_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.SEND_PREPARED:\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.START_PENDING_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.POLL_PENDING_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CANCEL_PENDING_QUERY:\n                this._onInstantiationProgress = [];\n                if (response.type == WorkerResponseType.SUCCESS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CREATE_PREPARED:\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n        }\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\n    }\n\n    /** Received an error */\n    protected onError(event: ErrorEvent): void {\n        console.error(event);\n        console.error(`error in duckdb worker: ${event.message}`);\n        this._pendingRequests.clear();\n    }\n\n    /** The worker was closed */\n    protected onClose(): void {\n        this._workerShutdownResolver(null);\n        if (this._pendingRequests.size != 0) {\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\n            return;\n        }\n        this._pendingRequests.clear();\n    }\n\n    /** Reset the duckdb */\n    public async reset(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\n        return await this.postTask(task);\n    }\n\n    /** Ping the worker thread */\n    public async ping(): Promise<any> {\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\n        await this.postTask(task);\n    }\n    /** Try to drop a file */\n    public async dropFile(name: string): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, null>(WorkerRequestType.DROP_FILE, name);\n        return await this.postTask(task);\n    }\n    /** Try to drop files */\n    public async dropFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\n        return await this.postTask(task);\n    }\n    /** Flush all files */\n    public async flushFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\n        return await this.postTask(task);\n    }\n\n    /** Open the database */\n    public async instantiate(\n        mainModuleURL: string,\n        pthreadWorkerURL: string | null = null,\n        progress: (progress: InstantiationProgress) => void = _p => {},\n    ): Promise<null> {\n        this._onInstantiationProgress.push(progress);\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\n            WorkerRequestType.INSTANTIATE,\n            [mainModuleURL, pthreadWorkerURL],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get the version */\n    public async getVersion(): Promise<string> {\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\n        const version = await this.postTask(task);\n        return version;\n    }\n\n    /** Get the feature flags */\n    public async getFeatureFlags(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\n            WorkerRequestType.GET_FEATURE_FLAGS,\n            null,\n        );\n        const feature = await this.postTask(task);\n        return feature;\n    }\n\n    /** Open a new database */\n    public async open(config: DuckDBConfig): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\n        await this.postTask(task);\n    }\n\n    /** Tokenize a script text */\n    public async tokenize(text: string): Promise<ScriptTokens> {\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\n        const tokens = await this.postTask(task);\n        return tokens;\n    }\n\n    /** Connect to the database */\n    public async connectInternal(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\n        return await this.postTask(task);\n    }\n\n    /** Connect to the database */\n    public async connect(): Promise<AsyncDuckDBConnection> {\n        const cid = await this.connectInternal();\n        return new AsyncDuckDBConnection(this, cid);\n    }\n\n    /** Disconnect from the database */\n    public async disconnect(conn: ConnectionID): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\n            WorkerRequestType.DISCONNECT,\n            conn,\n        );\n        await this.postTask(task);\n    }\n\n    /** Run a query */\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.RUN_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Start a pending query */\n    public async startPendingQuery(conn: ConnectionID, text: string): Promise<Uint8Array | null> {\n        const task = new WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>(\n            WorkerRequestType.START_PENDING_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Poll a pending query */\n    public async pollPendingQuery(conn: ConnectionID): Promise<Uint8Array | null> {\n        const task = new WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>(\n            WorkerRequestType.POLL_PENDING_QUERY,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n    /** Cancel a pending query */\n    public async cancelPendingQuery(conn: ConnectionID): Promise<boolean> {\n        const task = new WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>(\n            WorkerRequestType.CANCEL_PENDING_QUERY,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Fetch query results */\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\n            WorkerRequestType.FETCH_QUERY_RESULTS,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get table names */\n    public async getTableNames(conn: number, text: string): Promise<string[]> {\n        const task = new WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>(\n            WorkerRequestType.GET_TABLE_NAMES,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Prepare a statement and return its identifier */\n    public async createPrepared(conn: number, text: string): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\n            WorkerRequestType.CREATE_PREPARED,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Close a prepared statement */\n    public async closePrepared(conn: number, statement: number): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\n            WorkerRequestType.CLOSE_PREPARED,\n            [conn, statement],\n        );\n        await this.postTask(task);\n    }\n    /** Execute a prepared statement and return the full result */\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.RUN_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Execute a prepared statement and stream the result */\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.SEND_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Glob file infos */\n    public async globFiles(path: string): Promise<WebFile[]> {\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\n            WorkerRequestType.GLOB_FILE_INFOS,\n            path,\n        );\n        return await this.postTask(task);\n    }\n    /** Register file text */\n    public async registerFileText(name: string, text: string): Promise<void> {\n        const buffer = TEXT_ENCODER.encode(text);\n        await this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file path. */\n    public async registerFileURL(\n        name: string,\n        url: string,\n        proto: DuckDBDataProtocol,\n        directIO: boolean,\n    ): Promise<void> {\n        if (url === undefined) {\n            url = name;\n        }\n        const task = new WorkerTask<\n            WorkerRequestType.REGISTER_FILE_URL,\n            [string, string, DuckDBDataProtocol, boolean],\n            null\n        >(WorkerRequestType.REGISTER_FILE_URL, [name, url, proto, directIO]);\n        await this.postTask(task);\n    }\n\n    /** Register an empty file buffer. */\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, new Uint8Array()],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register a file buffer. */\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, buffer],\n        );\n        await this.postTask(task, [buffer.buffer]);\n    }\n\n    /** Register a file handle. */\n    public async registerFileHandle<HandleType>(\n        name: string,\n        handle: HandleType,\n        protocol: DuckDBDataProtocol,\n        directIO: boolean,\n    ): Promise<void> {\n        const task = new WorkerTask<\n            WorkerRequestType.REGISTER_FILE_HANDLE,\n            [string, any, DuckDBDataProtocol, boolean],\n            null\n        >(WorkerRequestType.REGISTER_FILE_HANDLE, [name, handle, protocol, directIO]);\n        await this.postTask(task, []);\n    }\n\n    /** Enable file statistics */\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\n            [name, enable],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Export file statistics */\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\n            name,\n        );\n        return await this.postTask(task, []);\n    }\n\n    /** Copy a file to a buffer. */\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\n            name,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Copy a file to a path. */\n    public async copyFileToPath(name: string, path: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\n            WorkerRequestType.COPY_FILE_TO_PATH,\n            [name, path],\n        );\n        await this.postTask(task);\n    }\n\n    /** Insert arrow from an ipc stream */\n    public async insertArrowFromIPCStream(\n        conn: ConnectionID,\n        buffer: Uint8Array,\n        options?: ArrowInsertOptions,\n    ): Promise<void> {\n        if (buffer.length == 0) return;\n        // Pass to the worker\n        const task = new WorkerTask<\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n            [number, Uint8Array, ArrowInsertOptions | undefined],\n            null\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\n        await this.postTask(task, [buffer.buffer]);\n    }\n    /** Insert a csv file */\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(arrowToSQLField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n    /** Insert a json file */\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(arrowToSQLField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n}\n", "import { DuckDBBindings } from '../bindings';\nimport { WorkerResponseVariant, WorkerRequestVariant, WorkerRequestType, WorkerResponseType } from './worker_request';\nimport { Logger, LogEntryVariant } from '../log';\nimport { InstantiationProgress } from '../bindings/progress';\n\nexport abstract class AsyncDuckDBDispatcher implements Logger {\n    /** The bindings */\n    protected _bindings: DuckDBBindings | null = null;\n    /** The next message id */\n    protected _nextMessageId = 0;\n\n    /** Instantiate the wasm module */\n    protected abstract instantiate(\n        mainModule: string,\n        pthreadWorker: string | null,\n        progress: (p: InstantiationProgress) => void,\n    ): Promise<DuckDBBindings>;\n    /** Post a response to the main thread */\n    protected abstract postMessage(response: WorkerResponseVariant, transfer: ArrayBuffer[]): void;\n\n    /** Send log entry to the main thread */\n    public log(entry: LogEntryVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: 0,\n                type: WorkerResponseType.LOG,\n                data: entry,\n            },\n            [],\n        );\n    }\n\n    /** Send plain OK without further data */\n    protected sendOK(request: WorkerRequestVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.OK,\n                data: null,\n            },\n            [],\n        );\n    }\n\n    /** Fail with an error */\n    protected failWith(request: WorkerRequestVariant, e: Error): void {\n        // Workaround for Firefox not being able to perform structured-clone on Native Errors\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n        const obj: any = {\n            name: e.name,\n            message: e.message,\n            stack: e.stack || undefined,\n        };\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.ERROR,\n                data: obj,\n            },\n            [],\n        );\n        return;\n    }\n\n    /** Process a request from the main thread */\n    public async onMessage(request: WorkerRequestVariant): Promise<void> {\n        // First process those requests that don't need bindings\n        switch (request.type) {\n            case WorkerRequestType.PING:\n                this.sendOK(request);\n                return;\n            case WorkerRequestType.INSTANTIATE:\n                if (this._bindings != null) {\n                    this.failWith(request, new Error('duckdb already initialized'));\n                }\n                try {\n                    this._bindings = await this.instantiate(request.data[0], request.data[1], p => {\n                        this.postMessage(\n                            {\n                                messageId: this._nextMessageId++,\n                                requestId: request.messageId,\n                                type: WorkerResponseType.INSTANTIATE_PROGRESS,\n                                data: p,\n                            },\n                            [],\n                        );\n                    });\n                    this.sendOK(request);\n                } catch (e: any) {\n                    console.log(e);\n                    this._bindings = null;\n                    this.failWith(request, e);\n                }\n                return;\n            default:\n                break;\n        }\n\n        // Bindings not initialized?\n        if (!this._bindings) {\n            return this.failWith(request, new Error('duckdb is not initialized'));\n        }\n\n        // Catch every exception and forward it as error message to the main thread\n        try {\n            switch (request.type) {\n                case WorkerRequestType.GET_VERSION:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.VERSION_STRING,\n                            data: this._bindings.getVersion(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.GET_FEATURE_FLAGS:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FEATURE_FLAGS,\n                            data: this._bindings.getFeatureFlags(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.RESET:\n                    this._bindings.reset();\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.OPEN:\n                    this._bindings.open(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.DROP_FILE:\n                    this._bindings.dropFile(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.DROP_FILES:\n                    this._bindings.dropFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.FLUSH_FILES:\n                    this._bindings.flushFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CONNECT: {\n                    const conn = this._bindings.connect();\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.CONNECTION_INFO,\n                            data: conn.useUnsafe((_, c) => c),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.DISCONNECT:\n                    this._bindings.disconnect(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CREATE_PREPARED: {\n                    const result = this._bindings.createPrepared(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.PREPARED_STATEMENT_ID,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.CLOSE_PREPARED: {\n                    this._bindings.closePrepared(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.RUN_PREPARED: {\n                    const result = this._bindings.runPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.RUN_QUERY: {\n                    const result = this._bindings.runQuery(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.SEND_PREPARED: {\n                    const result = this._bindings.sendPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_HEADER,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.START_PENDING_QUERY: {\n                    const result = this._bindings.startPendingQuery(request.data[0], request.data[1]);\n                    const transfer = [];\n                    if (result) {\n                        transfer.push(result.buffer);\n                    }\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL,\n                            data: result,\n                        },\n                        transfer,\n                    );\n                    break;\n                }\n                case WorkerRequestType.POLL_PENDING_QUERY: {\n                    const result = this._bindings.pollPendingQuery(request.data);\n                    const transfer = [];\n                    if (result) {\n                        transfer.push(result.buffer);\n                    }\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL,\n                            data: result,\n                        },\n                        transfer,\n                    );\n                    break;\n                }\n                case WorkerRequestType.CANCEL_PENDING_QUERY: {\n                    const result = this._bindings.cancelPendingQuery(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.SUCCESS,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.FETCH_QUERY_RESULTS: {\n                    const result = this._bindings.fetchQueryResults(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_CHUNK,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GET_TABLE_NAMES: {\n                    const result = this._bindings.getTableNames(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.TABLE_NAMES,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GLOB_FILE_INFOS: {\n                    const infos = this._bindings.globFiles(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_INFOS,\n                            data: infos,\n                        },\n                        [],\n                    );\n                    break;\n                }\n\n                case WorkerRequestType.REGISTER_FILE_URL:\n                    this._bindings.registerFileURL(request.data[0], request.data[1], request.data[2], request.data[3]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_BUFFER:\n                    this._bindings.registerFileBuffer(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_HANDLE:\n                    this._bindings.registerFileHandle(\n                        request.data[0],\n                        request.data[1],\n                        request.data[2],\n                        request.data[3],\n                    );\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_PATH:\n                    this._bindings.copyFileToPath(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_BUFFER: {\n                    const buffer = this._bindings.copyFileToBuffer(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_BUFFER,\n                            data: buffer,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.COLLECT_FILE_STATISTICS:\n                    this._bindings.collectFileStatistics(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.EXPORT_FILE_STATISTICS: {\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_STATISTICS,\n                            data: this._bindings.exportFileStatistics(request.data),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM: {\n                    this._bindings.insertArrowFromIPCStream(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_CSV_FROM_PATH: {\n                    this._bindings.insertCSVFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_JSON_FROM_PATH: {\n                    this._bindings.insertJSONFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.TOKENIZE: {\n                    const result = this._bindings.tokenize(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.SCRIPT_TOKENS,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n            }\n        } catch (e: any) {\n            console.log(e);\n            return this.failWith(request, e);\n        }\n    }\n}\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,10,2,95,1,125,0,96,0,1,107,0,3,2,1,1,10,12,1,10,0,67,0,0,0,0,251,7,0,11])),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "{\n    \"name\": \"@duckdb/duckdb-wasm\",\n    \"version\": \"1.28.0\",\n    \"description\": \"DuckDB powered by WebAssembly\",\n    \"license\": \"MIT\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/duckdb/duckdb-wasm.git\"\n    },\n    \"keywords\": [\n        \"sql\",\n        \"duckdb\",\n        \"relational\",\n        \"database\",\n        \"data\",\n        \"query\",\n        \"wasm\",\n        \"analytics\",\n        \"olap\",\n        \"arrow\",\n        \"parquet\",\n        \"json\",\n        \"csv\"\n    ],\n    \"dependencies\": {\n        \"apache-arrow\": \"^13.0.0\"\n    },\n    \"devDependencies\": {\n        \"@types/emscripten\": \"^1.39.8\",\n        \"@types/jasmine\": \"^4.3.1\",\n        \"@typescript-eslint/eslint-plugin\": \"^6.5.0\",\n        \"@typescript-eslint/parser\": \"^6.7.3\",\n        \"esbuild\": \"^0.19.5\",\n        \"eslint\": \"^8.50.0\",\n        \"eslint-plugin-jasmine\": \"^4.1.3\",\n        \"eslint-plugin-react\": \"^7.33.2\",\n        \"fast-glob\": \"^3.3.1\",\n        \"jasmine\": \"^5.1.0\",\n        \"jasmine-core\": \"^5.1.1\",\n        \"jasmine-spec-reporter\": \"^7.0.0\",\n        \"js-sha256\": \"^0.9.0\",\n        \"karma\": \"^6.4.2\",\n        \"karma-chrome-launcher\": \"^3.2.0\",\n        \"karma-coverage\": \"^2.2.1\",\n        \"karma-firefox-launcher\": \"^2.1.2\",\n        \"karma-jasmine\": \"^5.1.0\",\n        \"karma-jasmine-html-reporter\": \"^2.1.0\",\n        \"karma-sourcemap-loader\": \"^0.4.0\",\n        \"karma-spec-reporter\": \"^0.0.36\",\n        \"make-dir\": \"^4.0.0\",\n        \"nyc\": \"^15.1.0\",\n        \"prettier\": \"^3.0.2\",\n        \"puppeteer\": \"^21.1.1\",\n        \"rimraf\": \"^5.0.5\",\n        \"s3rver\": \"^3.7.1\",\n        \"typedoc\": \"^0.25.2\",\n        \"typescript\": \"^5.2.2\",\n        \"wasm-feature-detect\": \"^1.5.1\",\n        \"web-worker\": \"^1.2.0\"\n    },\n    \"scripts\": {\n        \"build:debug\": \"node bundle.mjs debug && tsc --emitDeclarationOnly\",\n        \"build:release\": \"node bundle.mjs release && tsc --emitDeclarationOnly\",\n        \"docs\": \"typedoc\",\n        \"report\": \"node ./coverage.mjs\",\n        \"test:node\": \"node --enable-source-maps ../jasmine/bin/jasmine ./dist/tests-node.cjs\",\n        \"test:node:debug\": \"node --inspect-brk --enable-source-maps ../jasmine/bin/jasmine ./dist/tests-node.cjs\",\n        \"test:node:coverage\": \"nyc -r json --report-dir ./coverage/node node ../jasmine/bin/jasmine ./dist/tests-node.cjs\",\n        \"test:firefox\": \"karma start ./karma/tests-firefox.cjs\",\n        \"test:chrome\": \"karma start ./karma/tests-chrome.cjs\",\n        \"test:chrome:eh\": \"karma start ./karma/tests-chrome-eh.cjs\",\n        \"test:chrome:coverage\": \"karma start ./karma/tests-chrome-coverage.cjs\",\n        \"test:browser\": \"karma start ./karma/tests-all.cjs\",\n        \"test:browser:debug\": \"karma start ./karma/tests-debug.cjs\",\n        \"test\": \"npm run test:chrome && npm run test:node\",\n        \"test:coverage\": \"npm run test:chrome:coverage && npm run test:node:coverage && npm run report\",\n        \"lint\": \"eslint src test\"\n    },\n    \"files\": [\n        \"dist\",\n        \"!dist/types/test\"\n    ],\n    \"main\": \"dist/duckdb-browser.cjs\",\n    \"module\": \"dist/duckdb-browser.mjs\",\n    \"types\": \"dist/duckdb-browser.d.ts\",\n    \"jsdelivr\": \"dist/duckdb-browser.cjs\",\n    \"unpkg\": \"dist/duckdb-browser.mjs\",\n    \"sideEffects\": false,\n    \"browser\": {\n        \"fs\": false,\n        \"path\": false,\n        \"perf_hooks\": false,\n        \"os\": false,\n        \"worker_threads\": false\n    },\n    \"exports\": {\n        \"./dist/duckdb-mvp.wasm\": \"./dist/duckdb-mvp.wasm\",\n        \"./dist/duckdb-eh.wasm\": \"./dist/duckdb-eh.wasm\",\n        \"./dist/duckdb-coi.wasm\": \"./dist/duckdb-coi.wasm\",\n        \"./dist/duckdb-browser\": \"./dist/duckdb-browser.mjs\",\n        \"./dist/duckdb-browser.cjs\": \"./dist/duckdb-browser.cjs\",\n        \"./dist/duckdb-browser.mjs\": \"./dist/duckdb-browser.mjs\",\n        \"./dist/duckdb-browser-blocking\": \"./dist/duckdb-browser-blocking.mjs\",\n        \"./dist/duckdb-browser-blocking.mjs\": \"./dist/duckdb-browser-blocking.mjs\",\n        \"./dist/duckdb-browser-blocking.cjs\": \"./dist/duckdb-browser-blocking.cjs\",\n        \"./dist/duckdb-browser-coi.pthread.worker.js\": \"./dist/duckdb-browser-coi.pthread.worker.js\",\n        \"./dist/duckdb-browser-coi.worker.js\": \"./dist/duckdb-browser-coi.worker.js\",\n        \"./dist/duckdb-browser-eh.worker.js\": \"./dist/duckdb-browser-eh.worker.js\",\n        \"./dist/duckdb-browser-mvp.worker.js\": \"./dist/duckdb-browser-mvp.worker.js\",\n        \"./dist/duckdb-node\": \"./dist/duckdb-node.cjs\",\n        \"./dist/duckdb-node.cjs\": \"./dist/duckdb-node.cjs\",\n        \"./dist/duckdb-node-blocking\": \"./dist/duckdb-node-blocking.cjs\",\n        \"./dist/duckdb-node-blocking.cjs\": \"./dist/duckdb-node-blocking.cjs\",\n        \"./dist/duckdb-node-eh.worker.cjs\": \"./dist/duckdb-node-eh.worker.cjs\",\n        \"./dist/duckdb-node-mvp.worker.cjs\": \"./dist/duckdb-node-mvp.worker.cjs\",\n        \"./blocking\": {\n            \"browser\": {\n                \"types\": \"./dist/duckdb-browser-blocking.d.ts\",\n                \"import\": \"./dist/duckdb-browser-blocking.mjs\",\n                \"require\": \"./dist/duckdb-browser-blocking.cjs\"\n            },\n            \"node\": {\n                \"types\": \"./dist/duckdb-node-blocking.d.ts\",\n                \"require\": \"./dist/duckdb-node-blocking.cjs\",\n                \"import\": \"./dist/duckdb-node-blocking.cjs\"\n            },\n            \"types\": \"./dist/duckdb-browser-blocking.d.ts\",\n            \"import\": \"./dist/duckdb-browser-blocking.mjs\",\n            \"require\": \"./dist/duckdb-browser-blocking.cjs\"\n        },\n        \".\": {\n            \"browser\": {\n                \"types\": \"./dist/duckdb-browser.d.ts\",\n                \"import\": \"./dist/duckdb-browser.mjs\",\n                \"require\": \"./dist/duckdb-browser.cjs\"\n            },\n            \"node\": {\n                \"types\": \"./dist/duckdb-node.d.ts\",\n                \"import\": \"./dist/duckdb-node.cjs\",\n                \"require\": \"./dist/duckdb-node.cjs\"\n            },\n            \"types\": \"./dist/duckdb-browser.d.ts\",\n            \"import\": \"./dist/duckdb-browser.mjs\",\n            \"require\": \"./dist/duckdb-browser.cjs\"\n        }\n    }\n}\n", "import config from '../package.json';\n\nexport const PACKAGE_NAME = config.name;\nexport const PACKAGE_VERSION = config.version;\n\nconst VERSION_PARTS = config.version.split('.');\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\n", "import * as check from 'wasm-feature-detect';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\n// Platform check taken from here:\n// https://github.com/xtermjs/xterm.js/blob/master/src/common/Platform.ts#L21\n\ninterface INavigator {\n    userAgent: string;\n    language: string;\n    platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = () => (typeof navigator === 'undefined' ? true : false);\nconst userAgent = () => (isNode() ? 'node' : navigator.userAgent);\nexport const isFirefox = () => userAgent().includes('Firefox');\nexport const isSafari = () => /^((?!chrome|android).)*safari/i.test(userAgent());\n\nexport interface DuckDBBundles {\n    mvp: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    eh?: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    coi?: {\n        mainModule: string;\n        mainWorker: string;\n        pthreadWorker: string;\n    };\n}\n\nexport function getJsDelivrBundles(): DuckDBBundles {\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\n    return {\n        mvp: {\n            mainModule: `${jsdelivr_dist_url}duckdb-mvp.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-mvp.worker.js`,\n        },\n        eh: {\n            mainModule: `${jsdelivr_dist_url}duckdb-eh.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-eh.worker.js`,\n        },\n        // COI is still experimental, let the user opt in explicitly\n    };\n}\n\nexport interface DuckDBBundle {\n    mainModule: string;\n    mainWorker: string | null;\n    pthreadWorker: string | null;\n}\n\nexport interface PlatformFeatures {\n    bigInt64Array: boolean;\n    crossOriginIsolated: boolean;\n    wasmExceptions: boolean;\n    wasmSIMD: boolean;\n    wasmBulkMemory: boolean;\n    wasmThreads: boolean;\n}\n\nlet bigInt64Array: boolean | null = null;\nlet wasmExceptions: boolean | null = null;\nlet wasmThreads: boolean | null = null;\nlet wasmSIMD: boolean | null = null;\nlet wasmBulkMemory: boolean | null = null;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n    let crossOriginIsolated: boolean;\n}\n\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\n    if (bigInt64Array == null) {\n        bigInt64Array = typeof BigInt64Array != 'undefined';\n    }\n    if (wasmExceptions == null) {\n        wasmExceptions = await check.exceptions();\n    }\n    if (wasmThreads == null) {\n        wasmThreads = await check.threads();\n    }\n    if (wasmSIMD == null) {\n        wasmSIMD = await check.simd();\n    }\n    if (wasmBulkMemory == null) {\n        wasmBulkMemory = await check.bulkMemory();\n    }\n    return {\n        bigInt64Array: bigInt64Array!,\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\n        wasmExceptions: wasmExceptions!,\n        wasmSIMD: wasmSIMD!,\n        wasmThreads: wasmThreads!,\n        wasmBulkMemory: wasmBulkMemory!,\n    };\n}\n\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\n    const platform = await getPlatformFeatures();\n    if (platform.wasmExceptions) {\n        if (platform.wasmSIMD && platform.wasmThreads && platform.crossOriginIsolated && bundles.coi) {\n            return {\n                mainModule: bundles.coi.mainModule,\n                mainWorker: bundles.coi.mainWorker,\n                pthreadWorker: bundles.coi.pthreadWorker,\n            };\n        }\n        if (bundles.eh) {\n            return {\n                mainModule: bundles.eh.mainModule,\n                mainWorker: bundles.eh.mainWorker,\n                pthreadWorker: null,\n            };\n        }\n    }\n    return {\n        mainModule: bundles.mvp.mainModule,\n        mainWorker: bundles.mvp.mainWorker,\n        pthreadWorker: null,\n    };\n}\n", "import Worker from 'web-worker';\n\nexport async function createWorker(url: string) {\n    const request = new Request(url);\n    const workerScript = await fetch(request);\n    const workerURL = URL.createObjectURL(await workerScript.blob());\n    return new Worker(workerURL);\n}\n", "import { DuckDBModule } from './duckdb_module';\nimport { UDFFunction } from './udf_function';\nimport * as udf_rt from './udf_runtime';\n\n/** Wrapper for TextDecoder to support shared array buffers */\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\n    const decoder = new TextDecoder();\n    return (data: any) => {\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        return decoder.decode(data);\n    };\n}\n/** Helper to decode text */\nexport const decodeText = TextDecoderWrapper();\n\n/** Copy a buffer */\nexport function failWith(mod: DuckDBModule, msg: string): void {\n    console.error(`FAIL WITH: ${msg}`);\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\n}\n\n/** Copy a buffer */\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\n    copy.set(buffer);\n    return copy;\n}\n\n/** Decode a string */\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\n}\n\n/** The data protocol */\nexport enum DuckDBDataProtocol {\n    BUFFER = 0,\n    NODE_FS = 1,\n    BROWSER_FILEREADER = 2,\n    BROWSER_FSACCESS = 3,\n    HTTP = 4,\n    S3 = 5,\n}\n\n/** File flags for opening files*/\nexport enum FileFlags {\n    //! Open file with read access\n    FILE_FLAGS_READ = 1 << 0,\n    //! Open file with write access\n    FILE_FLAGS_WRITE = 1 << 1,\n    //! Use direct IO when reading/writing to the file\n    FILE_FLAGS_DIRECT_IO = 1 << 2,\n    //! Create file if not exists, can only be used together with WRITE\n    FILE_FLAGS_FILE_CREATE = 1 << 3,\n    //! Always create a new file. If a file exists, the file is truncated. Cannot be used together with CREATE.\n    FILE_FLAGS_FILE_CREATE_NEW = 1 << 4,\n    //! Open file in append mode\n    FILE_FLAGS_APPEND = 1 << 5,\n}\n\n/** Configuration for the AWS S3 Filesystem */\nexport interface S3Config {\n    region?: string;\n    endpoint?: string;\n    accessKeyId?: string;\n    secretAccessKey?: string;\n    sessionToken?: string;\n}\n\n/** An info for a file registered with DuckDB */\nexport interface DuckDBFileInfo {\n    cacheEpoch: number;\n    fileId: number;\n    fileName: string;\n    dataProtocol: DuckDBDataProtocol;\n    dataUrl: string | null;\n    allowFullHttpReads?: boolean;\n    s3Config?: S3Config;\n}\n\n/** Global info for all files registered with DuckDB */\nexport interface DuckDBGlobalFileInfo {\n    cacheEpoch: number;\n    allowFullHttpReads?: boolean;\n    s3Config?: S3Config;\n}\n\n/** Call a function with packed response buffer */\nexport function callSRet(\n    mod: DuckDBModule,\n    funcName: string,\n    argTypes: Array<Emscripten.JSType>,\n    args: Array<any>,\n): [number, number, number] {\n    const stackPointer = mod.stackSave();\n\n    // Allocate the packed response buffer\n    const response = mod.stackAlloc(3 * 8);\n    argTypes.unshift('number');\n    args.unshift(response);\n\n    // Do the call\n    mod.ccall(funcName, null, argTypes, args);\n\n    // Read the response\n    const status = mod.HEAPF64[(response >> 3) + 0];\n    const data = mod.HEAPF64[(response >> 3) + 1];\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\n\n    // Restore the stack\n    mod.stackRestore(stackPointer);\n    return [status, data, dataSize];\n}\n\n/** Drop response buffers */\nexport function dropResponseBuffers(mod: DuckDBModule): void {\n    mod.ccall('duckdb_web_clear_response', null, [], []);\n}\n\n/** The duckdb runtime */\nexport interface DuckDBRuntime {\n    _files?: Map<string, any>;\n    _udfFunctions: Map<number, UDFFunction>;\n\n    // Test a platform feature\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\n\n    // File APIs with dedicated file identifier\n    getDefaultDataProtocol(mod: DuckDBModule): number;\n    openFile(mod: DuckDBModule, fileId: number, flags: FileFlags): void;\n    syncFile(mod: DuckDBModule, fileId: number): void;\n    closeFile(mod: DuckDBModule, fileId: number): void;\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n\n    // File APIs with path parameter\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n\n    // Call a scalar UDF function\n    callScalarUDF(\n        mod: DuckDBModule,\n        response: number,\n        funcId: number,\n        descPtr: number,\n        descSize: number,\n        ptrsPtr: number,\n        ptrsSize: number,\n    ): void;\n}\n\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\n    _udfFunctions: new Map(),\n\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\n    getDefaultDataProtocol: (_mod: DuckDBModule): number => DuckDBDataProtocol.BUFFER,\n    openFile: (_mod: DuckDBModule, _fileId: number, flags: FileFlags): void => {},\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\n        return 0;\n    },\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    callScalarUDF: (\n        mod: DuckDBModule,\n        response: number,\n        funcId: number,\n        descPtr: number,\n        descSize: number,\n        ptrsPtr: number,\n        ptrsSize: number,\n    ): void => {\n        udf_rt.callScalarUDF(DEFAULT_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\n    },\n};\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "DuckDBAccessMode", "TokenType", "LogLevel", "LogTopic", "LogEvent", "LogOrigin", "VoidLogger", "_entry", "ConsoleLogger", "level", "entry", "getLogLevelLabel", "getLogEventLabel", "event", "getLogTopicLabel", "topic", "getLogOriginLabel", "origin", "StatusCode", "AsyncDuckDBConnection", "bindings", "conn", "callback", "text", "buffer", "reader", "header", "iter", "AsyncResultStreamIterator", "query", "stmt", "AsyncPreparedStatement", "table", "options", "db", "connectionId", "statementId", "params", "WorkerRequestType", "WorkerResponseType", "WorkerTask", "type", "data", "resolve", "reject", "arrowToSQLType", "dec", "c", "arrowToSQLField", "map_", "name", "t", "TEXT_ENCODER", "AsyncDuckDB", "logger", "worker", "_reject", "task", "transfer", "mid", "_a", "response", "p", "e", "mainModuleURL", "pthreadWorkerURL", "progress", "_p", "config", "cid", "statement", "path", "url", "proto", "directIO", "handle", "protocol", "enable", "out", "k", "AsyncDuckDBDispatcher", "request", "obj", "_", "result", "infos", "bulkMemory", "exceptions", "simd", "threads", "package_default", "PACKAGE_NAME", "PACKAGE_VERSION", "VERSION_PARTS", "PACKAGE_VERSION_MAJOR", "PACKAGE_VERSION_MINOR", "PACKAGE_VERSION_PATCH", "isNode", "userAgent", "isFirefox", "isSafari", "getJsDelivrBundles", "jsdelivr_dist_url", "bigInt64Array", "wasmExceptions", "wasmThreads", "wasmSIMD", "wasmBulkMemory", "getPlatformFeatures", "selectBundle", "bundles", "platform", "import_web_worker", "createWorker", "workerScript", "workerURL", "Worker", "TextDecoderWrapper", "decoder", "decodeText", "DuckDBDataProtocol"]
}
