{
  "version": 3,
  "sources": ["../../@evidence-dev/component-utilities/src/buildQuery.js"],
  "sourcesContent": ["import { setContext, getContext } from 'svelte';\nimport { Query as QueryBuilder, sql } from '@uwdata/mosaic-sql';\nimport { Query, resolveMaybePromise } from '@evidence-dev/sdk/usql';\nimport { query } from '@evidence-dev/universal-sql/client-duckdb';\nimport { derived, writable } from 'svelte/store';\n\nconst QUERY_CONTEXT_KEY = '___usql_query';\n/**\n * Defaults to the query function from universal sql\n * @type {(x: string) => Query}\n */\nlet queryFunction = query;\n\nexport const setQueryFunction = (queryFn) => {\n\tsetContext(QUERY_CONTEXT_KEY, queryFn);\n\tqueryFunction = queryFn;\n};\n\nexport const getQueryFunction = () => getContext(QUERY_CONTEXT_KEY);\n\n/**\n * @typedef QueryProps\n * @property {string} [value] Column to be used as value when selected\n * @property {string} [label] (optional) Column to be used as label for each value\n * @property {string | string[] | Record<string, string>} [select] (optional) any additional fields to include (e.g. not value or label)\n * @property {string | import(\"@evidence-dev/sdk/usql\").QueryValue} [data] Table or subquery to select from\n * @property {string} [where] (optional) Where clause for dataset\n * @property {string} [order] (optional) Order by clause for dataset\n */\n\n/**\n * @param {QueryProps} queryProps\n * @param {string} id\n * @param {Array<Record<string,unknown>>} initialData\n * @example export let value, data, label, order, where;\n *  $: queryProps = {value, data, label, order, where}\n *\tconst {results, update} = buildReactiveInputQuery(queryProps, `id`, $page.data.data[`id`])\n *\t$: update({value, data, label, order, where})\n *\t$: ({hasQuery, query} = $results)\n */\nexport const buildReactiveInputQuery = (queryProps, id, initialData) => {\n\tconst internal = writable(buildInputQuery(queryProps, id, initialData));\n\n\tlet currentQuery;\n\treturn {\n\t\tresults: derived(internal, (v) => v),\n\t\tupdate: async (queryProps) => {\n\t\t\tconst { hasQuery, query } = buildInputQuery(queryProps, id);\n\t\t\tif (!hasQuery) {\n\t\t\t\tinternal.set({ hasQuery: false });\n\t\t\t} else {\n\t\t\t\t// We can run .fetch() with wreckless abandon because if the query\n\t\t\t\t// has already been fetched (e.g. hasn't changed), then this\n\t\t\t\t// is basically a no-op\n\t\t\t\tresolveMaybePromise(() => {\n\t\t\t\t\tif (query.hash !== currentQuery?.hash) {\n\t\t\t\t\t\tcurrentQuery = query;\n\t\t\t\t\t\tinternal.set({ hasQuery, query });\n\t\t\t\t\t}\n\t\t\t\t}, query.fetch());\n\t\t\t}\n\t\t}\n\t};\n};\n\n/**\n * @param {QueryProps} opts\n * @param {string} id\n * @returns { { hasQuery: false } | { hasQuery: true, query: Query } }\n * @deprecated Prefer buildReactiveInputQuery\n */\nexport const buildInputQuery = ({ value, label, select, data, where, order }, id, initialData) => {\n\tif (!data || !(value || select)) return { hasQuery: false };\n\n\tlet parentHasNoResolve = false;\n\tconst q = new QueryBuilder().distinct();\n\tif (value) q.select({ value: sql`${value}` });\n\tif (label) {\n\t\tq.select({ label: sql`${label}` });\n\t} else {\n\t\tq.select({ label: sql`${value}` });\n\t}\n\tif (select) q.select(select);\n\n\tif (typeof data === 'string') {\n\t\tif (data.trim().match(/^[\\w]+$/)) {\n\t\t\t// This is a table name\n\t\t\tq.from(data.trim());\n\t\t} else {\n\t\t\t// This is probably a subquery, or just broken\n\t\t\tq.from(sql(data.trim()));\n\t\t}\n\t} else if (Query.isQuery(data)) {\n\t\t// data is a QueryStore\n\t\t// use that as a subquery\n\t\tq.from(sql`(${data.text})`);\n\t\tparentHasNoResolve = data.opts.noResolve ?? false;\n\t} else {\n\t\treturn { hasQuery: false };\n\t}\n\n\tif (where) {\n\t\tq.where(where);\n\t}\n\n\tif (order) {\n\t\tq.orderby(sql`${order}`);\n\t\tq.select({\n\t\t\tordinal: sql`row_number() over (ORDER BY ${order})`\n\t\t});\n\t}\n\n\tconst newQuery = buildQuery(q.toString(), id, initialData, { noResolve: parentHasNoResolve });\n\t// Don't make the component author bother with this, just provide the data\n\tnewQuery.fetch();\n\treturn {\n\t\thasQuery: true,\n\t\tquery: newQuery\n\t};\n};\n\n/**\n *\n * @param {string} queryString\n * @param {string} id\n * @param {any[]} initialData\n * @param {Omit<import('@evidence-dev/sdk/usql').QueryOpts, 'initialData'>} [opts]\n *\n * @returns {Query}\n */\nexport const buildQuery = (queryString, id, initialData, opts) => {\n\treturn Query.create(queryString, queryFunction, id, { ...opts, initialData });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA,SAAS,aAAa;AAGtB,IAAM,oBAAoB;AAK1B,IAAI,gBAAgB;AAEb,IAAM,mBAAmB,CAAC,YAAY;AAC5C,aAAW,mBAAmB,OAAO;AACrC,kBAAgB;AACjB;AAEO,IAAM,mBAAmB,MAAM,WAAW,iBAAiB;AAsB3D,IAAM,0BAA0B,CAAC,YAAY,IAAI,gBAAgB;AACvE,QAAM,WAAW,SAAS,gBAAgB,YAAY,IAAI,WAAW,CAAC;AAEtE,MAAI;AACJ,SAAO;AAAA,IACN,SAAS,QAAQ,UAAU,CAAC,MAAM,CAAC;AAAA,IACnC,QAAQ,OAAOA,gBAAe;AAC7B,YAAM,EAAE,UAAU,OAAAC,OAAM,IAAI,gBAAgBD,aAAY,EAAE;AAC1D,UAAI,CAAC,UAAU;AACd,iBAAS,IAAI,EAAE,UAAU,MAAM,CAAC;AAAA,MACjC,OAAO;AAIN,4BAAoB,MAAM;AACzB,cAAIC,OAAM,UAAS,6CAAc,OAAM;AACtC,2BAAeA;AACf,qBAAS,IAAI,EAAE,UAAU,OAAAA,OAAM,CAAC;AAAA,UACjC;AAAA,QACD,GAAGA,OAAM,MAAM,CAAC;AAAA,MACjB;AAAA,IACD;AAAA,EACD;AACD;AAQO,IAAM,kBAAkB,CAAC,EAAE,OAAO,OAAO,QAAQ,MAAM,OAAO,MAAM,GAAG,IAAI,gBAAgB;AACjG,MAAI,CAAC,QAAQ,EAAE,SAAS;AAAS,WAAO,EAAE,UAAU,MAAM;AAE1D,MAAI,qBAAqB;AACzB,QAAM,IAAI,IAAI,MAAa,EAAE,SAAS;AACtC,MAAI;AAAO,MAAE,OAAO,EAAE,OAAO,MAAM,KAAK,GAAG,CAAC;AAC5C,MAAI,OAAO;AACV,MAAE,OAAO,EAAE,OAAO,MAAM,KAAK,GAAG,CAAC;AAAA,EAClC,OAAO;AACN,MAAE,OAAO,EAAE,OAAO,MAAM,KAAK,GAAG,CAAC;AAAA,EAClC;AACA,MAAI;AAAQ,MAAE,OAAO,MAAM;AAE3B,MAAI,OAAO,SAAS,UAAU;AAC7B,QAAI,KAAK,KAAK,EAAE,MAAM,SAAS,GAAG;AAEjC,QAAE,KAAK,KAAK,KAAK,CAAC;AAAA,IACnB,OAAO;AAEN,QAAE,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC;AAAA,IACxB;AAAA,EACD,WAAWC,OAAM,QAAQ,IAAI,GAAG;AAG/B,MAAE,KAAK,OAAO,KAAK,IAAI,GAAG;AAC1B,yBAAqB,KAAK,KAAK,aAAa;AAAA,EAC7C,OAAO;AACN,WAAO,EAAE,UAAU,MAAM;AAAA,EAC1B;AAEA,MAAI,OAAO;AACV,MAAE,MAAM,KAAK;AAAA,EACd;AAEA,MAAI,OAAO;AACV,MAAE,QAAQ,MAAM,KAAK,EAAE;AACvB,MAAE,OAAO;AAAA,MACR,SAAS,kCAAkC,KAAK;AAAA,IACjD,CAAC;AAAA,EACF;AAEA,QAAM,WAAW,WAAW,EAAE,SAAS,GAAG,IAAI,aAAa,EAAE,WAAW,mBAAmB,CAAC;AAE5F,WAAS,MAAM;AACf,SAAO;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA,EACR;AACD;AAWO,IAAM,aAAa,CAAC,aAAa,IAAI,aAAa,SAAS;AACjE,SAAOA,OAAM,OAAO,aAAa,eAAe,IAAI,EAAE,GAAG,MAAM,YAAY,CAAC;AAC7E;",
  "names": ["queryProps", "query", "Query"]
}
