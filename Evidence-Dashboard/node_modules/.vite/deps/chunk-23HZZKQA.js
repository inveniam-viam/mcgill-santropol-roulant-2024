import {
  derived,
  writable
} from "./chunk-WJV2ZNLW.js";
import {
  getContext,
  setContext
} from "./chunk-ZEX3E7TZ.js";
import {
  Query as Query2,
  resolveMaybePromise
} from "./chunk-IPRHIPGV.js";
import {
  Query,
  sql
} from "./chunk-TVCBMZK3.js";

// ../../node_modules/@evidence-dev/component-utilities/src/buildQuery.js
import { query } from "@evidence-dev/universal-sql/client-duckdb";
var QUERY_CONTEXT_KEY = "___usql_query";
var queryFunction = query;
var setQueryFunction = (queryFn) => {
  setContext(QUERY_CONTEXT_KEY, queryFn);
  queryFunction = queryFn;
};
var getQueryFunction = () => getContext(QUERY_CONTEXT_KEY);
var buildReactiveInputQuery = (queryProps, id, initialData) => {
  const internal = writable(buildInputQuery(queryProps, id, initialData));
  let currentQuery;
  return {
    results: derived(internal, (v) => v),
    update: async (queryProps2) => {
      const { hasQuery, query: query2 } = buildInputQuery(queryProps2, id);
      if (!hasQuery) {
        internal.set({ hasQuery: false });
      } else {
        resolveMaybePromise(() => {
          if (query2.hash !== (currentQuery == null ? void 0 : currentQuery.hash)) {
            currentQuery = query2;
            internal.set({ hasQuery, query: query2 });
          }
        }, query2.fetch());
      }
    }
  };
};
var buildInputQuery = ({ value, label, select, data, where, order }, id, initialData) => {
  if (!data || !(value || select))
    return { hasQuery: false };
  let parentHasNoResolve = false;
  const q = new Query().distinct();
  if (value)
    q.select({ value: sql`${value}` });
  if (label) {
    q.select({ label: sql`${label}` });
  } else {
    q.select({ label: sql`${value}` });
  }
  if (select)
    q.select(select);
  if (typeof data === "string") {
    if (data.trim().match(/^[\w]+$/)) {
      q.from(data.trim());
    } else {
      q.from(sql(data.trim()));
    }
  } else if (Query2.isQuery(data)) {
    q.from(sql`(${data.text})`);
    parentHasNoResolve = data.opts.noResolve ?? false;
  } else {
    return { hasQuery: false };
  }
  if (where) {
    q.where(where);
  }
  if (order) {
    q.orderby(sql`${order}`);
    q.select({
      ordinal: sql`row_number() over (ORDER BY ${order})`
    });
  }
  const newQuery = buildQuery(q.toString(), id, initialData, { noResolve: parentHasNoResolve });
  newQuery.fetch();
  return {
    hasQuery: true,
    query: newQuery
  };
};
var buildQuery = (queryString, id, initialData, opts) => {
  return Query2.create(queryString, queryFunction, id, { ...opts, initialData });
};

export {
  setQueryFunction,
  getQueryFunction,
  buildReactiveInputQuery,
  buildInputQuery,
  buildQuery
};
//# sourceMappingURL=chunk-23HZZKQA.js.map
