{
  "version": 3,
  "sources": ["../../@evidence-dev/sdk/src/lib/debug.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/ref.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/to-sql.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/expression.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/operators.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/repeat.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/functions.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/windows.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/aggregates.js", "../../@evidence-dev/sdk/node_modules/@uwdata/mosaic-sql/src/Query.js", "../../@evidence-dev/sdk/src/usql/utilities/resolveMaybePromise.js", "../../@evidence-dev/sdk/src/usql/query/queryScore.js", "../../@evidence-dev/sdk/src/build-dev/vite/constants.js", "../../@evidence-dev/sdk/src/usql/query/sterilizeQuery.js", "../../@evidence-dev/sdk/src/usql/query/Query.js", "../../@evidence-dev/sdk/src/usql/utilities/duckdbSerialize.js", "../../@evidence-dev/sdk/src/usql/setTrackProxy/setTrackProxy.js"],
  "sourcesContent": ["/// <reference types=\"vite/client\" />\nexport const enableDebug = () => {\n\tprocess.env.EVIDENCE_DEBUG = 'true';\n\tprocess.env.VITE_PUBLIC_EVIDENCE_DEBUG = 'true';\n};\n\nexport const isDebug = () => {\n\tif (typeof process !== 'undefined')\n\t\treturn Boolean(\n\t\t\tprocess.env.EVIDENCE_DEBUG ||\n\t\t\t\tprocess.env.VITE_PUBLIC_EVIDENCE_DEBUG ||\n\t\t\t\t(process.env.NODE_ENV === 'test' && !process.env.EVIDENCE_DISABLE_TEST_DEBUG)\n\t\t);\n\tif (typeof import.meta.env !== 'undefined')\n\t\treturn (\n\t\t\tBoolean(import.meta.env.EVIDENCE_DEBUG) || Boolean(import.meta.env.VITE_PUBLIC_EVIDENCE_DEBUG)\n\t\t);\n};\nexport const disableDebug = () => {\n\tdelete process.env.EVIDENCE_DEBUG;\n\tdelete process.env.VITE_PUBLIC_EVIDENCE_DEBUG;\n};\n", "/**\n * Class representing a table and/or column reference.\n */\nexport class Ref {\n  /**\n   * Create a new Ref instance.\n   * @param {string|Ref|null} table The table name.\n   * @param {string|null} column The column name.\n   */\n  constructor(table, column) {\n    if (table) this.table = String(table);\n    if (column) this.column = column;\n  }\n\n  /**\n   * Get the list of referenced columns. Either a single element array\n   * if column is non-null, otherwise an empty array.\n   */\n  get columns() {\n    return this.column ? [this.column] : [];\n  }\n\n  /**\n   * Generate a SQL string for this reference.\n   * @returns {string} The SQL string.\n   */\n  toString() {\n    const { table, column } = this;\n    if (column) {\n      const col = column.startsWith('*') ? column : `\"${column}\"`;\n      return `${table ? `${quoteTableName(table)}.` : ''}${col}`;\n    } else {\n      return table ? quoteTableName(table) : 'NULL';\n    }\n  }\n}\n\n/**\n * Quote a table name. For example, `foo.bar` becomes `\"foo\".\"bar\".\n * @param {string} table the name of the table which may contain a database reference\n * @returns The quoted table name.\n */\nfunction quoteTableName(table) {\n  const pieces = table.split('.');\n  return pieces.map(p => `\"${p}\"`).join('.');\n}\n\n/**\n * Test is a reference refers to a given column name.\n * @param {*} ref The reference to test.\n * @param {string} name The column name to check for.\n * @returns {boolean} True if ref is a Ref instance that refers to\n *  the given column name. False otherwise.\n */\nexport function isColumnRefFor(ref, name) {\n  return ref instanceof Ref && ref.column === name;\n}\n\n/**\n * Interpret a value, defaulting to a column reference.\n * @param {*} value The value to interpret. If string-typed,\n *  a new column reference will be returned.\n * @returns {*} A column reference or the input value.\n */\nexport function asColumn(value) {\n  return typeof value === 'string' ? column(value) : value;\n}\n\n/**\n * Interpret a value, defaulting to a table (relation) reference.\n * @param {*} value The value to interpret. If string-typed,\n *  a new table (relation) reference will be returned.\n * @returns {*} A table reference or the input value.\n */\nexport function asRelation(value) {\n  return typeof value === 'string' ? relation(value) : value;\n}\n\n/**\n * Create a table (relation) reference.\n * @param {string} name The table (relation) name.\n * @returns {Ref} The generated table reference.\n */\nexport function relation(name) {\n  return new Ref(name);\n}\n\n/**\n * Create a column reference.\n * @param {string} [table] The table name (optional).\n * @param {string} column The column name.\n * @returns {Ref} The generated column reference.\n */\nexport function column(table, column) {\n  if (arguments.length === 1) {\n    column = table;\n    table = null;\n  }\n  return new Ref(table, column);\n}\n\n/**\n * Create a reference to all columns in a table (relation).\n * @param {string} table The table name.\n * @returns {Ref} The generated reference.\n */\nexport function all(table) {\n  return new Ref(table, '*');\n}\n", "/**\n * Convert a value to a corresponding SQL string.\n * Input string values are assumed to be column references,\n * otherwise the logic of literalToSQL applies.\n * @param {*} value The value to convert to SQL.\n * @returns {string} A SQL string.\n */\nexport function toSQL(value) {\n  return typeof value === 'string'\n    ? `\"${value}\"` // strings as column refs\n    : literalToSQL(value);\n}\n\n/**\n * Convert a literal value to a corresponding SQL string.\n * The values null, undefined, Infinity, NaN, and invalid\n * dates are converted to SQL NULL values.\n * UTC dates map to the SQL Date type, otherwise JavaScript\n * date values map to the SQL Timestamp type.\n * Values that are not JavaScript Date, RegExp, or primitive types\n * are coerced to strings, relying on a defined toString method.\n * @param {*} value The literal value.\n * @returns {string} A SQL string.\n */\nexport function literalToSQL(value) {\n  switch (typeof value) {\n    case 'boolean':\n      return value ? 'TRUE' : 'FALSE';\n    case 'string':\n      return `'${value}'`;\n    case 'number':\n      return Number.isFinite(value) ? String(value) : 'NULL';\n    default:\n      if (value == null) {\n        return 'NULL';\n      } else if (value instanceof Date) {\n        const ts = +value;\n        if (Number.isNaN(ts)) return 'NULL';\n        const y = value.getUTCFullYear();\n        const m = value.getUTCMonth();\n        const d = value.getUTCDate();\n        return ts === Date.UTC(y, m, d)\n          ? `MAKE_DATE(${y}, ${m+1}, ${d})` // utc date\n          : `EPOCH_MS(${ts})`; // timestamp\n      } else if (value instanceof RegExp) {\n        return `'${value.source}'`;\n      } else {\n        // otherwise rely on string coercion\n        return String(value);\n      }\n  }\n}\n", "import { literalToSQL } from './to-sql.js';\n\n/**\n * Test if a value is parameter-like. Parameters have addEventListener methods.\n * @param {*} value The value to test.\n * @returns True if the value is param-like, false otherwise.\n */\nexport const isParamLike = value => typeof value?.addEventListener === 'function';\n\n/**\n * Test if a value is a SQL expression instance.\n * @param {*} value The value to test.\n * @returns {boolean} True if value is a SQL expression, false otherwise.\n */\nexport function isSQLExpression(value) {\n  return value instanceof SQLExpression;\n}\n\n/**\n * Base class for all SQL expressions. Most callers should use the `sql`\n * template tag rather than instantiate this class.\n */\nexport class SQLExpression {\n\n  /**\n   * Create a new SQL expression instance.\n   * @param {(string|SQLExpression|Ref)[]} parts The parts of the expression.\n   * @param {string[]} [columns=[]] The column dependencies\n   * @param {object} [props] Additional properties for this expression.\n   */\n  constructor(parts, columns, props) {\n    this._expr = Array.isArray(parts) ? parts : [parts];\n    this._deps = columns || [];\n    this.annotate(props);\n\n    const params = this._expr.filter(part => isParamLike(part));\n    if (params.length > 0) {\n      this._params = Array.from(new Set(params));\n      this._params.forEach(param => {\n        param.addEventListener('value', () => update(this, this.map?.get('value')));\n      });\n    } else {\n      // do not support event listeners if not needed\n      // this causes the expression instance to NOT be param-like\n      this.addEventListener = undefined;\n    }\n  }\n\n  /**\n   * A reference to this expression.\n   * Provides compatibility with param-like objects.\n   */\n  get value() {\n    return this;\n  }\n\n  /**\n   * The column dependencies of this expression.\n   * @returns {string[]} The columns dependencies.\n   */\n  get columns() {\n    const { _params, _deps } = this;\n    if (_params) {\n      // pull latest dependencies, as they may change across updates\n      const pset = new Set(_params.flatMap(p => {\n        const cols = p.value?.columns;\n        return Array.isArray(cols) ? cols : [];\n      }));\n      if (pset.size) {\n        const set = new Set(_deps);\n        pset.forEach(col => set.add(col));\n        return Array.from(set);\n      }\n    }\n    // if no params, return fixed dependencies\n    return _deps;\n  }\n\n  /**\n   * The first column dependency in this expression, or undefined if none.\n   * @returns {string} The first column dependency.\n   */\n  get column() {\n    return this._deps.length ? this._deps[0] : this.columns[0];\n  }\n\n  /**\n   * Annotate this expression instance with additional properties.\n   * @param {object[]} [props] One or more objects with properties to add.\n   * @returns {this} This SQL expression.\n   */\n  annotate(...props) {\n    return Object.assign(this, ...props);\n  }\n\n  /**\n   * Generate a SQL code string corresponding to this expression.\n   * @returns {string} A SQL code string.\n   */\n  toString() {\n    return this._expr\n      .map(p => isParamLike(p) && !isSQLExpression(p) ? literalToSQL(p.value) : p)\n      .join('');\n  }\n\n  /**\n   * Add an event listener callback for the provided event type.\n   * @param {string} type The event type to listen for (for example, \"value\").\n   * @param {(a: SQLExpression) => Promise?} callback The callback function to\n   *  invoke upon updates. A callback may optionally return a Promise that\n   *  upstream listeners may await before proceeding.\n   */\n  addEventListener(type, callback) {\n    const map = this.map || (this.map = new Map());\n    const set = map.get(type) || (map.set(type, new Set), map.get(type));\n    set.add(callback);\n  }\n}\n\nfunction update(expr, callbacks) {\n  if (callbacks?.size) {\n    return Promise.allSettled(Array.from(callbacks, fn => fn(expr)));\n  }\n}\n\nexport function parseSQL(strings, exprs) {\n  const spans = [strings[0]];\n  const cols = new Set;\n  const n = exprs.length;\n  for (let i = 0, k = 0; i < n;) {\n    const e = exprs[i];\n    if (isParamLike(e)) {\n      spans[++k] = e;\n    } else {\n      if (Array.isArray(e?.columns)) {\n        e.columns.forEach(col => cols.add(col));\n      }\n      spans[k] += typeof e === 'string' ? e : literalToSQL(e);\n    }\n    const s = strings[++i];\n    if (isParamLike(spans[k])) {\n      spans[++k] = s;\n    } else {\n      spans[k] += s;\n    }\n  }\n\n  return { spans, cols: Array.from(cols) };\n}\n\n/**\n * Tag function for SQL expressions. Interpolated values\n * may be strings, other SQL expression objects (such as column\n * references), or parameterized values.\n */\nexport function sql(strings, ...exprs) {\n  const { spans, cols } = parseSQL(strings, exprs);\n  return new SQLExpression(spans, cols);\n}\n", "import { sql } from './expression.js';\nimport { asColumn } from './ref.js';\n\nfunction visit(callback) {\n  callback(this.op, this);\n  this.children?.forEach(v => v.visit(callback));\n}\n\nfunction logical(op, clauses) {\n  const children = clauses.filter(x => x != null).map(asColumn);\n  const strings = children.map((c, i) => i ? ` ${op} ` : '');\n  if (children.length === 1) {\n    strings.push('')\n  } else if (children.length > 1) {\n    strings[0] = '(';\n    strings.push(')');\n  }\n  return sql(strings, ...children).annotate({ op, children, visit });\n}\n\nexport const and = (...clauses) => logical('AND', clauses.flat());\nexport const or = (...clauses) => logical('OR', clauses.flat());\n\nconst unaryOp = op => a => sql`(${op} ${asColumn(a)})`.annotate({ op, a, visit });\n\nexport const not = unaryOp('NOT');\n\nconst unaryPostOp = op => a => sql`(${asColumn(a)} ${op})`.annotate({ op, a, visit });\n\nexport const isNull = unaryPostOp('IS NULL');\nexport const isNotNull = unaryPostOp('IS NOT NULL');\n\nconst binaryOp = op => (a, b) => sql`(${asColumn(a)} ${op} ${asColumn(b)})`.annotate({ op, a, b, visit });\n\nexport const eq = binaryOp('=');\nexport const neq = binaryOp('<>');\nexport const lt = binaryOp('<');\nexport const gt = binaryOp('>');\nexport const lte = binaryOp('<=');\nexport const gte = binaryOp('>=');\nexport const isDistinct = binaryOp('IS DISTINCT FROM');\nexport const isNotDistinct = binaryOp('IS NOT DISTINCT FROM');\n\nfunction rangeOp(op, a, range, exclusive) {\n  a = asColumn(a);\n  const prefix = op.startsWith('NOT ') ? 'NOT ' : '';\n  const expr = !range ? sql``\n    : exclusive ? sql`${prefix}(${range[0]} <= ${a} AND ${a} < ${range[1]})`\n    : sql`(${a} ${op} ${range[0]} AND ${range[1]})`;\n  return expr.annotate({ op, visit, field: a, range });\n}\n\nexport const isBetween = (a, range, exclusive) => rangeOp('BETWEEN', a, range, exclusive);\nexport const isNotBetween = (a, range, exclusive) => rangeOp('NOT BETWEEN', a, range, exclusive);\n", "export function repeat(length, str) {\n  return Array.from({ length }, () => str);\n}\n", "import { sql } from './expression.js';\nimport { asColumn } from './ref.js';\nimport { repeat } from './repeat.js';\n\nexport function functionCall(op, type) {\n  return (...values) => {\n    const args = values.map(asColumn);\n    const cast = type ? `::${type}` : '';\n    const expr = args.length\n      ? sql([`${op}(`, ...repeat(args.length - 1, ', '), `)${cast}`], ...args)\n      : sql`${op}()${cast}`;\n    return expr.annotate({ func: op, args });\n  }\n}\n\nexport const regexp_matches = functionCall('REGEXP_MATCHES');\nexport const contains = functionCall('CONTAINS');\nexport const prefix = functionCall('PREFIX');\nexport const suffix = functionCall('SUFFIX');\nexport const lower = functionCall('LOWER');\nexport const upper = functionCall('UPPER');\nexport const length = functionCall('LENGTH');\nexport const isNaN = functionCall('ISNAN');\nexport const isFinite = functionCall('ISFINITE');\nexport const isInfinite = functionCall('ISINF');\n", "import { SQLExpression, isParamLike, sql } from './expression.js';\nimport { functionCall } from './functions.js';\nimport { asColumn } from './ref.js';\nimport { repeat } from './repeat.js';\n\n/**\n * Base class for individual window functions.\n * Most callers should use a dedicated window function\n * rather than instantiate this class.\n */\nexport class WindowFunction extends SQLExpression {\n  constructor(op, func, type, name, group = '', order = '', frame = '') {\n    // build and parse expression\n    let expr;\n    const noWindowParams = !(group || order || frame);\n    if (name && noWindowParams) {\n      expr = name ? sql`${func} OVER \"${name}\"` : sql`${func} OVER ()`;\n    } else {\n      const s1 = group && order ? ' ' : '';\n      const s2 = (group || order) && frame ? ' ' : '';\n      expr = sql`${func} OVER (${name ? `\"${name}\" ` : ''}${group}${s1}${order}${s2}${frame})`;\n    }\n    if (type) {\n      expr = sql`(${expr})::${type}`;\n    }\n    const { _expr, _deps } = expr;\n    super(_expr, _deps, { window: op, func, type, name, group, order, frame });\n  }\n\n  get basis() {\n    return this.column;\n  }\n\n  get label() {\n    const { func } = this;\n    return func.label ?? func.toString();\n  }\n\n  over(name) {\n    const { window: op, func, type, group, order, frame } = this;\n    return new WindowFunction(op, func, type, name, group, order, frame);\n  }\n\n  partitionby(...expr) {\n    const exprs = expr.flat().filter(x => x).map(asColumn);\n    const group = sql(\n      ['PARTITION BY ', repeat(exprs.length - 1, ', '), ''],\n      ...exprs\n    );\n    const { window: op, func, type, name, order, frame } = this;\n    return new WindowFunction(op, func, type, name, group, order, frame);\n  }\n\n  orderby(...expr) {\n    const exprs = expr.flat().filter(x => x).map(asColumn);\n    const order = sql(\n      ['ORDER BY ', repeat(exprs.length - 1, ', '), ''],\n      ...exprs\n    );\n    const { window: op, func, type, name, group, frame } = this;\n    return new WindowFunction(op, func, type, name, group, order, frame);\n  }\n\n  rows(expr) {\n    const frame = windowFrame('ROWS', expr);\n    const { window: op, func, type, name, group, order } = this;\n    return new WindowFunction(op, func, type, name, group, order, frame);\n  }\n\n  range(expr) {\n    const frame = windowFrame('RANGE', expr);\n    const { window: op, func, type, name, group, order } = this;\n    return new WindowFunction(op, func, type, name, group, order, frame);\n  }\n}\n\nfunction windowFrame(type, frame) {\n  if (isParamLike(frame)) {\n    const expr = sql`${frame}`;\n    expr.toString = () => `${type} ${frameToSQL(frame.value)}`;\n    return expr;\n  }\n  return `${type} ${frameToSQL(frame)}`;\n}\n\nfunction frameToSQL(frame) {\n  const [prev, next] = frame;\n  const a = prev === 0 ? 'CURRENT ROW'\n    : Number.isFinite(prev) ? `${Math.abs(prev)} PRECEDING`\n    : 'UNBOUNDED PRECEDING';\n  const b = next === 0 ? 'CURRENT ROW'\n    : Number.isFinite(next) ? `${Math.abs(next)} FOLLOWING`\n    : 'UNBOUNDED FOLLOWING';\n  return `BETWEEN ${a} AND ${b}`;\n}\n\nexport function winf(op, type) {\n  return (...values) => {\n    const func = functionCall(op)(...values);\n    return new WindowFunction(op, func, type);\n  };\n}\n\n/**\n * Create a window function that returns the number of the current row\n * within the partition, counting from 1.\n * @returns {WindowFunction} The generated window function.\n */\nexport const row_number = winf('ROW_NUMBER', 'INTEGER');\n\n/**\n * Create a window function that returns the rank of the current row with gaps.\n * This is the same as the row_number of its first peer.\n * @returns {WindowFunction} The generated window function.\n */\nexport const rank = winf('RANK', 'INTEGER');\n\n/**\n * Create a window function that returns the rank of the current row without gaps,\n * The function counts peer groups.\n * @returns {WindowFunction} The generated window function.\n */\nexport const dense_rank = winf('DENSE_RANK', 'INTEGER');\n\n/**\n * Create a window function that returns the relative rank of the current row.\n * (rank() - 1) / (total partition rows - 1).\n * @returns {WindowFunction} The generated window function.\n */\nexport const percent_rank = winf('PERCENT_RANK');\n\n/**\n * Create a window function that returns the cumulative distribution.\n * (number of preceding or peer partition rows) / total partition rows.\n * @returns {WindowFunction} The generated window function.\n */\nexport const cume_dist = winf('CUME_DIST');\n\n/**\n * Create a window function that r an integer ranging from 1 to the argument\n * value, dividing the partition as equally as possible.\n * @param {number|SQLExpression} num_buckets The number of quantile buckets.\n * @returns {WindowFunction} The generated window function.\n */\nexport const ntile = winf('NTILE');\n\n/**\n * Create a window function that returns the expression evaluated at the row\n * that is offset rows before the current row within the partition.\n * If there is no such row, instead return default (which must be of the same\n * type as the expression). Both offset and default are evaluated with respect\n * to the current row. If omitted, offset defaults to 1 and default to null.\n * @param {string|SQLExpression} expr The expression to evaluate.\n * @param {number|SQLExpression} offset The row offset.\n * @param {*} default The default value.\n * @returns {WindowFunction} The generated window function.\n */\nexport const lag = winf('LAG');\n\n/**\n * Create a window function that returns the expression evaluated at the row\n * that is offset rows after the current row within the partition.\n * If there is no such row, instead return default (which must be of the same\n * type as the expression). Both offset and default are evaluated with respect\n * to the current row. If omitted, offset defaults to 1 and default to null.\n * @param {string|SQLExpression} expr The expression to evaluate.\n * @param {number|SQLExpression} offset The row offset.\n * @param {*} default The default value.\n * @returns {WindowFunction} The generated window function.\n */\nexport const lead = winf('LEAD');\n\n/**\n * Create a window function that returns the expression evaluated at the row\n * that is the first row of the window frame.\n * @param {string|SQLExpression} expr The expression to evaluate.\n * @returns {WindowFunction} The generated window function.\n */\nexport const first_value = winf('FIRST_VALUE');\n\n/**\n * Create a window function that returns the expression evaluated at the row\n * that is the last row of the window frame.\n * @param {string|SQLExpression} expr The expression to evaluate.\n * @returns {WindowFunction} The generated window function.\n */\n\nexport const last_value = winf('LAST_VALUE');\n\n/**\n * Create a window function that returns the expression evaluated at the\n * nth row of the window frame (counting from 1), or null if no such row.\n * @param {string|SQLExpression} expr The expression to evaluate.\n * @param {number|SQLExpression} nth The 1-based window frame index.\n * @returns {WindowFunction} The generated window function.\n */\nexport const nth_value = winf('NTH_VALUE');\n", "import { SQLExpression, parseSQL, sql } from './expression.js';\nimport { asColumn } from './ref.js';\nimport { repeat } from './repeat.js';\nimport { literalToSQL } from './to-sql.js';\nimport { WindowFunction } from './windows.js';\n\n/**\n * Tag function for SQL aggregate expressions. Interpolated values\n * may be strings, other SQL expression objects (such as column\n * references), or parameterized values.\n */\nexport function agg(strings, ...exprs) {\n  return sql(strings, ...exprs).annotate({ aggregate: true });\n}\n\n/**\n * Base class for individual aggregate functions.\n * Most callers should use a dedicated aggregate function\n * rather than instantiate this class.\n */\nexport class AggregateFunction extends SQLExpression {\n  constructor(op, args, type, isDistinct, filter) {\n    args = (args || []).map(asColumn);\n    const { strings, exprs } = aggExpr(op, args, type, isDistinct, filter);\n    const { spans, cols } = parseSQL(strings, exprs);\n    super(spans, cols, { aggregate: op, args, type, isDistinct, filter });\n  }\n\n  get basis() {\n    return this.column;\n  }\n\n  get label() {\n    const { aggregate: op, args, isDistinct } = this;\n    const dist = isDistinct ? 'DISTINCT' + (args.length ? ' ' : '') : '';\n    const tail = args.length ? `(${dist}${args.map(unquoted).join(', ')})` : '';\n    return `${op.toLowerCase()}${tail}`;\n  }\n\n  distinct() {\n    const { aggregate: op, args, type, filter } = this;\n    return new AggregateFunction(op, args, type, true, filter);\n  }\n\n  where(filter) {\n    const { aggregate: op, args, type, isDistinct } = this;\n    return new AggregateFunction(op, args, type, isDistinct, filter);\n  }\n\n  window() {\n    const { aggregate: op, args, type, isDistinct } = this;\n    const func = new AggregateFunction(op, args, null, isDistinct);\n    return new WindowFunction(op, func, type);\n  }\n\n  partitionby(...expr) {\n    return this.window().partitionby(...expr);\n  }\n\n  orderby(...expr) {\n    return this.window().orderby(...expr);\n  }\n\n  rows(prev, next) {\n    return this.window().rows(prev, next);\n  }\n\n  range(prev, next) {\n    return this.window().range(prev, next);\n  }\n}\n\nfunction aggExpr(op, args, type, isDistinct, filter) {\n  const close = `)${type ? `::${type}` : ''}`;\n  let strings = [`${op}(${isDistinct ? 'DISTINCT ' :''}`];\n  let exprs = [];\n  if (args.length) {\n    strings = strings.concat([\n      ...repeat(args.length - 1, ', '),\n      `${close}${filter ? ' FILTER (WHERE ' : ''}`,\n      ...(filter ? [')'] : [])\n    ]);\n    exprs = [...args, ...(filter ? [filter] : [])];\n  } else {\n    strings[0] += '*' + close;\n  }\n  return { exprs, strings };\n}\n\nfunction unquoted(value) {\n  const s = literalToSQL(value);\n  return s && s.startsWith('\"') && s.endsWith('\"') ? s.slice(1, -1) : s\n}\n\nfunction aggf(op, type) {\n  return (...args) => new AggregateFunction(op, args, type);\n}\n\nexport const count = aggf('COUNT', 'INTEGER');\nexport const avg = aggf('AVG');\nexport const mean = aggf('AVG');\nexport const mad = aggf('MAD');\nexport const max = aggf('MAX');\nexport const min = aggf('MIN');\nexport const sum = aggf('SUM', 'DOUBLE');\nexport const product = aggf('PRODUCT');\nexport const median = aggf('MEDIAN');\nexport const quantile = aggf('QUANTILE');\nexport const mode = aggf('MODE');\n\nexport const variance = aggf('VARIANCE');\nexport const stddev = aggf('STDDEV');\nexport const skewness = aggf('SKEWNESS');\nexport const kurtosis = aggf('KURTOSIS');\nexport const entropy = aggf('ENTROPY');\nexport const varPop = aggf('VAR_POP');\nexport const stddevPop = aggf('STDDEV_POP');\n\nexport const corr = aggf('CORR');\nexport const covarPop = aggf('COVAR_POP');\nexport const regrIntercept = aggf('REGR_INTERCEPT');\nexport const regrSlope = aggf('REGR_SLOPE');\nexport const regrCount = aggf('REGR_COUNT');\nexport const regrR2 = aggf('REGR_R2');\nexport const regrSYY = aggf('REGR_SYY');\nexport const regrSXX = aggf('REGR_SXX');\nexport const regrSXY = aggf('REGR_SXY');\nexport const regrAvgX = aggf('REGR_AVGX');\nexport const regrAvgY = aggf('REGR_AVGY');\n\nexport const first = aggf('FIRST');\nexport const last = aggf('LAST');\n\nexport const argmin = aggf('ARG_MIN');\nexport const argmax = aggf('ARG_MAX');\n\nexport const stringAgg = aggf('STRING_AGG');\nexport const arrayAgg = aggf('ARRAY_AGG');\n", "import { isSQLExpression } from './expression.js';\nimport { asColumn, asRelation, isColumnRefFor, Ref } from './ref.js';\n\nexport class Query {\n\n  static select(...expr) {\n    return new Query().select(...expr);\n  }\n\n  static from(...expr) {\n    return new Query().from(...expr);\n  }\n\n  static with(...expr) {\n    return new Query().with(...expr);\n  }\n\n  static union(...queries) {\n    return new SetOperation('UNION', queries.flat());\n  }\n\n  static unionAll(...queries) {\n    return new SetOperation('UNION ALL', queries.flat());\n  }\n\n  static intersect(...queries) {\n    return new SetOperation('INTERSECT', queries.flat());\n  }\n\n  static except(...queries) {\n    return new SetOperation('EXCEPT', queries.flat());\n  }\n\n  constructor() {\n    this.query = {\n      with: [],\n      select: [],\n      from: [],\n      where: [],\n      groupby: [],\n      having: [],\n      window: [],\n      qualify: [],\n      orderby: []\n    };\n  }\n\n  clone() {\n    const q = new Query();\n    q.query = { ...this.query };\n    return q;\n  }\n\n  with(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.with;\n    } else {\n      const list = [];\n      const add = (as, q) => {\n        const query = q.clone();\n        query.cteFor = this;\n        list.push({ as, query });\n      };\n      expr.flat().forEach(e => {\n        if (e == null) {\n          // do nothing\n        } else if (e.as && e.query) {\n          add(e.as, e.query);\n        } else {\n          for (const as in e) {\n            add(as, e[as]);\n          }\n        }\n      });\n      query.with = query.with.concat(list);\n      return this;\n    }\n  }\n\n  select(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.select;\n    } else {\n      const list = [];\n      for (const e of expr.flat()) {\n        if (e == null) {\n          // do nothing\n        } else if (typeof e === 'string') {\n          list.push({ as: e, expr: asColumn(e) });\n        } else if (e instanceof Ref) {\n          list.push({ as: e.column, expr: e });\n        } else if (Array.isArray(e)) {\n          list.push({ as: e[0], expr: e[1] });\n        } else {\n          for (const as in e) {\n            list.push({ as: unquote(as), expr: asColumn(e[as]) });\n          }\n        }\n      }\n      query.select = query.select.concat(list);\n      return this;\n    }\n  }\n\n  $select(...expr) {\n    this.query.select = [];\n    return this.select(...expr);\n  }\n\n  distinct(value = true) {\n    this.query.distinct = !!value;\n    return this;\n  }\n\n  from(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.from;\n    } else {\n      const list = [];\n      expr.flat().forEach(e => {\n        if (e == null) {\n          // do nothing\n        } else if (typeof e === 'string') {\n          list.push({ as: e, from: asRelation(e) });\n        } else if (e instanceof Ref) {\n          list.push({ as: e.table, from: e });\n        } else if (isQuery(e) || isSQLExpression(e)) {\n          list.push({ from: e });\n        } else if (Array.isArray(e)) {\n          list.push({ as: unquote(e[0]), from: asRelation(e[1]) });\n        } else {\n          for (const as in e) {\n            list.push({ as: unquote(as), from: asRelation(e[as]) });\n          }\n        }\n      });\n      query.from = query.from.concat(list);\n      return this;\n    }\n  }\n\n  $from(...expr) {\n    this.query.from = [];\n    return this.from(...expr);\n  }\n\n  sample(value, method) {\n    const { query } = this;\n    if (arguments.length === 0) {\n      return query.sample;\n    } else {\n      let spec = value;\n      if (typeof value === 'number') {\n        spec = value > 0 && value < 1\n            ? { perc: 100 * value, method }\n            : { rows: Math.round(value), method };\n      }\n      query.sample = spec;\n      return this;\n    }\n  }\n\n  where(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.where;\n    } else {\n      query.where = query.where.concat(\n        expr.flat().filter(x => x)\n      );\n      return this;\n    }\n  }\n\n  $where(...expr) {\n    this.query.where = [];\n    return this.where(...expr);\n  }\n\n  groupby(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.groupby;\n    } else {\n      query.groupby = query.groupby.concat(\n        expr.flat().filter(x => x).map(asColumn)\n      );\n      return this;\n    }\n  }\n\n  $groupby(...expr) {\n    this.query.groupby = [];\n    return this.groupby(...expr);\n  }\n\n  having(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.having;\n    } else {\n      query.having = query.having.concat(\n        expr.flat().filter(x => x)\n      );\n      return this;\n    }\n  }\n\n  window(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.window;\n    } else {\n      const list = [];\n      expr.flat().forEach(e => {\n        if (e == null) {\n          // do nothing\n        } else {\n          for (const as in e) {\n            list.push({ as: unquote(as), expr: e[as] });\n          }\n        }\n      });\n      query.window = query.window.concat(list);\n      return this;\n    }\n  }\n\n  qualify(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.qualify;\n    } else {\n      query.qualify = query.qualify.concat(\n        expr.flat().filter(x => x)\n      );\n      return this;\n    }\n  }\n\n  orderby(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.orderby;\n    } else {\n      query.orderby = query.orderby.concat(\n        expr.flat().filter(x => x).map(asColumn)\n      );\n      return this;\n    }\n  }\n\n  limit(value) {\n    const { query } = this;\n    if (arguments.length === 0) {\n      return query.limit;\n    } else {\n      query.limit = Number.isFinite(value) ? value : undefined;\n      return this;\n    }\n  }\n\n  offset(value) {\n    const { query } = this;\n    if (arguments.length === 0) {\n      return query.offset;\n    } else {\n      query.offset = Number.isFinite(value) ? value : undefined;\n      return this;\n    }\n  }\n\n  get subqueries() {\n    const { query, cteFor } = this;\n    const ctes = (cteFor?.query || query).with;\n    const cte = ctes?.reduce((o, {as, query}) => (o[as] = query, o), {});\n    const q = [];\n    query.from.forEach(({ from }) => {\n      if (isQuery(from)) {\n        q.push(from);\n      } else if (cte[from.table]) {\n        const sub = cte[from.table];\n        q.push(sub);\n      }\n    });\n    return q;\n  }\n\n  toString() {\n    const {\n      select, distinct, from, sample, where, groupby,\n      having, window, qualify, orderby, limit, offset, with: cte\n    } = this.query;\n\n    const sql = [];\n\n    // WITH\n    if (cte.length) {\n      const list = cte.map(({ as, query })=> `\"${as}\" AS (${query})`);\n      sql.push(`WITH ${list.join(', ')}`);\n    }\n\n    // SELECT\n    const sels = select.map(\n      ({ as, expr }) => isColumnRefFor(expr, as) && !expr.table\n        ? `${expr}`\n        : `${expr} AS \"${as}\"`\n    );\n    sql.push(`SELECT${distinct ? ' DISTINCT' : ''} ${sels.join(', ')}`);\n\n    // FROM\n    if (from.length) {\n      const rels = from.map(({ as, from }) => {\n        const rel = isQuery(from) ? `(${from})` : `${from}`;\n        return !as || as === from.table ? rel : `${rel} AS \"${as}\"`;\n      });\n      sql.push(`FROM ${rels.join(', ')}`);\n    }\n\n    // WHERE\n    if (where.length) {\n      const clauses = where.map(String).filter(x => x).join(' AND ');\n      if (clauses) sql.push(`WHERE ${clauses}`);\n    }\n\n    // SAMPLE\n    if (sample) {\n      const { rows, perc, method, seed } = sample;\n      const size = rows ? `${rows} ROWS` : `${perc} PERCENT`;\n      const how = method ? ` (${method}${seed != null ? `, ${seed}` : ''})` : '';\n      sql.push(`USING SAMPLE ${size}${how}`);\n    }\n\n    // GROUP BY\n    if (groupby.length) {\n      sql.push(`GROUP BY ${groupby.join(', ')}`);\n    }\n\n    // HAVING\n    if (having.length) {\n      const clauses = having.map(String).filter(x => x).join(' AND ');\n      if (clauses) sql.push(`HAVING ${clauses}`);\n    }\n\n    // WINDOW\n    if (window.length) {\n      const windows = window.map(({ as, expr }) => `\"${as}\" AS (${expr})`);\n      sql.push(`WINDOW ${windows.join(', ')}`);\n    }\n\n    // QUALIFY\n    if (qualify.length) {\n      const clauses = qualify.map(String).filter(x => x).join(' AND ');\n      if (clauses) sql.push(`QUALIFY ${clauses}`);\n    }\n\n    // ORDER BY\n    if (orderby.length) {\n      sql.push(`ORDER BY ${orderby.join(', ')}`);\n    }\n\n    // LIMIT\n    if (Number.isFinite(limit)) {\n      sql.push(`LIMIT ${limit}`);\n    }\n\n    // OFFSET\n    if (Number.isFinite(offset)) {\n      sql.push(`OFFSET ${offset}`);\n    }\n\n    return sql.join(' ');\n  }\n}\n\nexport class SetOperation {\n  constructor(op, queries) {\n    this.op = op;\n    this.queries = queries.map(q => q.clone());\n    this.query = { orderby: [] };\n  }\n\n  clone() {\n    const q = new SetOperation(this.op, this.queries);\n    q.query = { ...this.query };\n    return q;\n  }\n\n  orderby(...expr) {\n    const { query } = this;\n    if (expr.length === 0) {\n      return query.orderby;\n    } else {\n      query.orderby = query.orderby.concat(\n        expr.flat().filter(x => x).map(asColumn)\n      );\n      return this;\n    }\n  }\n\n  limit(value) {\n    const { query } = this;\n    if (arguments.length === 0) {\n      return query.limit;\n    } else {\n      query.limit = Number.isFinite(value) ? value : undefined;\n      return this;\n    }\n  }\n\n  offset(value) {\n    const { query } = this;\n    if (arguments.length === 0) {\n      return query.offset;\n    } else {\n      query.offset = Number.isFinite(value) ? value : undefined;\n      return this;\n    }\n  }\n\n  get subqueries() {\n    const { queries, cteFor } = this;\n    if (cteFor) queries.forEach(q => q.cteFor = cteFor);\n    return queries;\n  }\n\n  toString() {\n    const { op, queries, query: { orderby, limit, offset } } = this;\n\n    const sql = [ queries.join(` ${op} `) ];\n\n    // ORDER BY\n    if (orderby.length) {\n      sql.push(`ORDER BY ${orderby.join(', ')}`);\n    }\n\n    // LIMIT\n    if (Number.isFinite(limit)) {\n      sql.push(`LIMIT ${limit}`);\n    }\n\n    // OFFSET\n    if (Number.isFinite(offset)) {\n      sql.push(`OFFSET ${offset}`);\n    }\n\n    return sql.join(' ');\n  }\n}\n\nexport function isQuery(value) {\n  return value instanceof Query || value instanceof SetOperation;\n}\n\nfunction unquote(s) {\n  return isDoubleQuoted(s) ? s.slice(1, -1) : s;\n}\n\nfunction isDoubleQuoted(s) {\n  return s[0] === '\"' && s[s.length-1] === '\"';\n}\n", "/**\n * @template T\n * @template [Returns=void]\n * @param {(v: T, isPromise: boolean) => import(\"../types.js\").MaybePromise<Returns>} handler\n * @param {import(\"../types.js\").MaybePromise<T> | (() => import(\"../types.js\").MaybePromise<T>)} value\n * @param {(e: Error, isPromise: boolean) => import(\"../types.js\").MaybePromise<Returns>} [onError]\n */\nexport const resolveMaybePromise = (handler, value, onError) => {\n\ttry {\n\t\tconst v =\n\t\t\ttypeof value === 'function'\n\t\t\t\t? /** @type {() => import(\"../types.js\").MaybePromise<T>} */ (value)()\n\t\t\t\t: value;\n\t\tif (v instanceof Promise) {\n\t\t\treturn v\n\t\t\t\t.then((v) => handler(v, true))\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconst error = e instanceof Error ? e : new Error('Unknown Error', { cause: e });\n\t\t\t\t\tif (onError) return onError(error, true);\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn handler(v, false);\n\t\t}\n\t} catch (e) {\n\t\tconst error = e instanceof Error ? e : new Error('Unknown Error', { cause: e });\n\t\tif (onError) return onError(error, false);\n\t\telse throw error;\n\t}\n};\n", "/**\n * @param {number} length\n * @param {import('../index.js').DescribeResultRow[]} columns\n * @returns {number}\n */\nexport const getQueryScore = (length, columns) => {\n\tconst scorePerRow = columns.reduce(\n\t\t(a, v) => a + columnTypeToScore(v.column_type),\n\t\tcolumns.length * 4 // include overhead for each column\n\t);\n\treturn Math.abs(scorePerRow * length);\n};\n\n// Util Functions\n\n/**\n * @param {string} columnType\n * @returns {columnType is `STRUCT(${string})` | `${string}[]`}\n */\nfunction isObjectType(columnType) {\n\treturn columnType.startsWith('STRUCT') || columnType.endsWith('[]');\n}\n\n/**\n * @param {string} columnType\n * @returns {columnType is `DECIMAL(${number},${number})`}\n */\nfunction isDecimalType(columnType) {\n\treturn columnType.startsWith('DECIMAL');\n}\n\n/**\n *\n * @param {import('../../types/duckdb-wellknown.js').DuckDBColumnType} columnType\n * @returns {number}\n */\nfunction columnTypeToScore(columnType) {\n\tconst roundedColumnScores = {\n\t\tstring: 2 * 15,\n\t\tnumber: 12,\n\t\tboolean: 4,\n\t\tdate: 48\n\t};\n\n\tif (isObjectType(columnType)) {\n\t\tconsole.warn(\n\t\t\t'[!] Evidence does not support DuckDB Struct or Array\\nIf you need to use one, convert it to JSON in your query, and then manually parse it in your project'\n\t\t);\n\t\treturn roundedColumnScores.string;\n\t}\n\tif (isDecimalType(columnType)) return roundedColumnScores.number;\n\n\tswitch (columnType) {\n\t\tcase 'BOOLEAN':\n\t\t\treturn roundedColumnScores.boolean;\n\t\tcase 'BIGINT':\n\t\tcase 'DOUBLE':\n\t\tcase 'FLOAT':\n\t\tcase 'INTEGER':\n\t\tcase 'SMALLINT':\n\t\tcase 'TINYINT':\n\t\tcase 'UBIGINT':\n\t\tcase 'UINTEGER':\n\t\tcase 'USMALLINT':\n\t\tcase 'UTINYINT':\n\t\tcase 'HUGEINT':\n\t\t\treturn roundedColumnScores.number;\n\t\tcase 'UUID':\n\t\tcase 'VARCHAR':\n\t\t\treturn roundedColumnScores.string;\n\t\tcase 'DATE':\n\t\tcase 'TIMESTAMP':\n\t\tcase 'TIMESTAMP_S':\n\t\tcase 'TIMESTAMP_MS':\n\t\tcase 'TIMESTAMP_NS':\n\t\tcase 'TIMESTAMP WITH TIME ZONE':\n\t\t\treturn roundedColumnScores.date;\n\n\t\t// the badlands\n\t\t// we should probably convert these in the client library too\n\t\tcase 'INTERVAL': // return 'Uint32Array';\n\t\tcase 'TIME':\n\t\tcase 'TIME WITH TIME ZONE': // return 'bigint';\n\t\tcase 'BLOB':\n\t\tcase 'BIT': // return 'Uint8Array';\n\t\t\treturn roundedColumnScores.string;\n\t\tdefault:\n\t\t\t// columnType should be `never`\n\t\t\tconsole.error(`Column type ${columnType} is not supported`);\n\t\t\treturn roundedColumnScores.string;\n\t}\n}\n", "export const VITE_EVENTS = Object.freeze({\n\tSOURCE_END: 'evidence:source-end',\n\tSOURCE_START: 'evidence:source-start',\n\tSOURCE_ERROR: 'evidence:source-error',\n\n\tRESET_QUERIES: 'evidence:reset-queries'\n});\n", "const unescapedComment = /--([^']|'.*')+$/;\nconst inlinedMultilineComments = /(\\/\\*.*\\*\\/)/g;\n/**\n * This function ensures that a query can safely be sent to DuckDB\n * It adds a newline to the query if it ends in a comment, and\n * ensures that the statement does not end with a semicolon\n *\n * It is not responsible for removing semicolons in\n * subqueries or nested expressions, only the root expression\n *\n * @param {string} query\n */\nexport const sterilizeQuery = (query) => {\n\tconst lines = query.split('\\n');\n\tlet inMultilineComment = false;\n\t// iterate in reverse order because we only want to find the last failing line\n\tfor (let i = lines.length; i > 0; i--) {\n\t\t// grab the line\n\t\tlet line = lines[i - 1];\n\t\t// keep track of any content we remove from the end of the line that we want to add back\n\t\tlet append = '';\n\n\t\t// detect if there are any inlined multiline comments\n\t\tconst multilineMatches = Array.from(line.matchAll(inlinedMultilineComments));\n\t\tfor (const multilineMatch of multilineMatches) {\n\t\t\t// remove all inline multiline comments (these are re-added at the end)\n\t\t\tconst before = line.slice(0, multilineMatch.index);\n\t\t\tconst after = line.slice(multilineMatch.index + multilineMatch[0].length);\n\t\t\tline = `${before}${after}`;\n\t\t}\n\n\t\t// if we are in a multiline comment, we don't want to do anything\n\t\tif (inMultilineComment) {\n\t\t\t// TODO: Does duckdb handle nested comments? This does not\n\t\t\tif (line.includes('/*')) {\n\t\t\t\t// we are at the start\n\t\t\t\tinMultilineComment = false; // we are no longer in a multiline comment\n\t\t\t\tconst parts = line.split('/*');\n\t\t\t\tline = parts.slice(0, -1).join('/*'); // remove the last part of the comment\n\t\t\t\t// (assume that \"/* /* xx\" is only \"/* xx\" as the comment)\n\t\t\t\tappend += '/*' + parts.slice(-1); // ensure we re-add the comment at the end\n\t\t\t}\n\t\t}\n\t\tif (line.trim().endsWith('*/')) {\n\t\t\t// we are at the end of a multiline comment\n\t\t\tinMultilineComment = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Handle single line comments\n\n\t\tconst match = unescapedComment.exec(line);\n\t\t// If we have an unescaped comment\n\t\tif (match) {\n\t\t\t// get the content before the comment, check if it ends with a semicolon\n\t\t\tconst before = line.slice(0, match.index);\n\t\t\tconst trimmed = before.trimEnd();\n\t\t\tif (trimmed.endsWith(';')) {\n\t\t\t\t// reconstruct the line without the ;\n\t\t\t\tconst after = line.slice(match.index);\n\t\t\t\tconst mid = before.slice(trimmed.length, before.length);\n\t\t\t\tline = `${before.slice(0, -1 + -1 * (before.length - trimmed.length))}${mid}${after}`;\n\t\t\t}\n\t\t} else {\n\t\t\t// no comments, we can just remove trailing semicolons\n\t\t\tconst trimmed = line.trimEnd();\n\t\t\tif (trimmed.endsWith(';')) {\n\t\t\t\tconst lastIdx = line.lastIndexOf(';');\n\t\t\t\tline = line.slice(0, lastIdx) + line.slice(lastIdx + 1);\n\t\t\t}\n\t\t}\n\n\t\t// re-add multiline comments that may have been removed at the beginning\n\t\tfor (const multilineMatch of multilineMatches) {\n\t\t\tconst before = line.slice(0, multilineMatch.index);\n\t\t\tconst after = line.slice(multilineMatch.index);\n\t\t\tline = `${before}${multilineMatch[0]}${after}`;\n\t\t}\n\t\t// if we have modified the line, update and escape the loop ( we don't handle inline statements - that's on the user )\n\t\tif (line !== lines[i - 1]) {\n\t\t\tlines[i - 1] = line + append;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlines.push(''); // add a blank newline at the end\n\n\treturn lines.join('\\n');\n};\n", "import { nanoid } from 'nanoid';\nimport { isDebug } from '../../lib/debug.js';\nimport {\n\tQuery as QueryBuilder,\n\tsql as taggedSql,\n\tsum as qSum,\n\tavg as qAvg,\n\tmin as qMin,\n\tmax as qMax,\n\tmedian as qMedian,\n\tcount as qCount\n} from '@uwdata/mosaic-sql';\nimport { sharedPromise } from '../../lib/sharedPromise.js';\nimport { resolveMaybePromise } from '../utilities/resolveMaybePromise.js';\nimport { getQueryScore } from './queryScore.js';\nimport { VITE_EVENTS } from '../../build-dev/vite/constants.js';\nimport { sterilizeQuery } from './sterilizeQuery.js';\n\n/**\n * @typedef {import(\"../types.js\").QueryResultRow} QueryResultRow\n */\n\n/**\n * @template T\n * @typedef {import('../types.js').MaybePromise<T>} MaybePromise\n */\n\n/**\n * @template {QueryResultRow} [RowType=QueryResultRow]\n * @typedef  {import('../../lib/sharedPromise.js').SharedPromise<Query<RowType>>} ChainableSharedPromise\n */\n\n/**\n * @template {QueryResultRow[]} RowType\n * @typedef {import(\"svelte/store\").Readable<RowType>} Readable\n */\n\n/**\n * @template {QueryResultRow} [RowType=QueryResultRow]\n * @typedef {RowType[] & Query<RowType>} QueryValue\n */\n\n/**\n * @typedef {Object} QueryEvents<RowType>\n * @property {undefined} dataReady\n * @property {number} highScore\n * @property {number} longRun\n * @property {Error} error\n */\n\n/**\n * @typedef {Object} QueryGlobalEvents\n * @property {undefined} inFlightQueryStart\n * @property {undefined} inFlightQueryEnd\n * @property {{raw: Query<any>, proxied: QueryValue<any>}} queryCreated\n */\n/** @typedef {import (\"../types.js\").EventEmitter<QueryGlobalEvents>} QueryGlobalEventEmitter */\n\n/**\n * @typedef {import('../types.js').EventEmitter<QueryEvents>} QueryEventEmitter\n */\n\n/**\n * @class\n * @template {QueryResultRow} [RowType=QueryResultRow]\n * @implements {Query<RowType>}\n * @implements {Readable<QueryValue<RowType>>}\n * @implements {QueryEventEmitter}\n */\nexport class Query {\n\t////////////////////////////\n\t/// < State Primatives > ///\n\t////////////////////////////\n\t#hasInitialData = false;\n\n\t/** @type {QueryValue<RowType>} */\n\t#value;\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/// Data\n\t/** @type {RowType[]} */\n\t#data = [];\n\t/** @type {number} */\n\t#dataQueryTime = -1;\n\tget dataLoaded() {\n\t\treturn ['resolved', 'rejected'].includes(this.#sharedDataPromise.state);\n\t}\n\tget dataLoading() {\n\t\treturn this.#sharedDataPromise.state === 'loading';\n\t}\n\tget dataQueryTime() {\n\t\treturn this.#dataQueryTime;\n\t}\n\t/// Length\n\t/** @type {number} */\n\t#length = 0;\n\t/** @type {number} */\n\t#lengthQueryTime = -1;\n\tget length() {\n\t\treturn this.#length;\n\t}\n\tget lengthLoaded() {\n\t\treturn ['resolved', 'rejected'].includes(this.#sharedLengthPromise.state);\n\t}\n\tget lengthLoading() {\n\t\treturn this.#sharedLengthPromise.state === 'loading';\n\t}\n\tget lengthQueryTime() {\n\t\treturn this.#lengthQueryTime;\n\t}\n\n\t/// Columns\n\t/** @type {import('../../types/duckdb-wellknown.js').DescribeResultRow[]} */\n\t#columns = [];\n\t/** @type {Record<keyof RowType, undefined> | undefined} */\n\t#mockRow = undefined;\n\t/** @type {number} */\n\t#columnsQueryTime = -1;\n\n\tget columns() {\n\t\treturn this.#columns;\n\t}\n\tget columnsLoaded() {\n\t\treturn ['resolved', 'rejected'].includes(this.#sharedColumnsPromise.state);\n\t}\n\tget columnsLoading() {\n\t\treturn this.#sharedColumnsPromise.state === 'loading';\n\t}\n\tget columnsQueryTime() {\n\t\treturn this.#columnsQueryTime;\n\t}\n\n\t/**\n\t * True when data, length, and columns have all been fetched\n\t */\n\tget ready() {\n\t\treturn (\n\t\t\tthis.#sharedLengthPromise.state === 'resolved' &&\n\t\t\tthis.#sharedColumnsPromise.state === 'resolved' &&\n\t\t\tthis.#sharedDataPromise.state === 'resolved'\n\t\t);\n\t}\n\t/**\n\t * True when data, length, or columns are currently being fetched\n\t */\n\tget loading() {\n\t\treturn (\n\t\t\tthis.#sharedLengthPromise.state === 'loading' ||\n\t\t\tthis.#sharedColumnsPromise.state === 'loading' ||\n\t\t\tthis.#sharedDataPromise.state === 'loading'\n\t\t);\n\t}\n\n\t/**\n\t * Use the getter/setter for #error instead of this value directly\n\t * @type {Error | undefined}\n\t */\n\t#__error;\n\n\tget #error() {\n\t\treturn this.#__error;\n\t}\n\t/**\n\t * @param {Error | undefined} v\n\t */\n\tset #error(v) {\n\t\tif (!v) return;\n\t\tconsole.error(`${this.id} | Error in Query!`, v?.message);\n\t\tthis.#emit('error', v);\n\t\tthis.#__error = v;\n\t}\n\tget error() {\n\t\treturn this.#error;\n\t}\n\n\t/** @type {QueryBuilder} */\n\t#query;\n\t/** @type {string} */\n\t#originalText;\n\t/**\n\t * The Query text as is was provided\n\t */\n\tget originalText() {\n\t\treturn this.#originalText;\n\t}\n\t/**\n\t * The Query text as it is being executed\n\t */\n\tget text() {\n\t\treturn this.#query?.toString() ?? \"SELECT 'Empty Query' WHERE 0\";\n\t}\n\n\t//////////////////////////////\n\t/// </ State Primatives /> ///\n\t//////////////////////////////\n\n\t//////////////////////////\n\t/// < Global Loading > ///\n\t//////////////////////////\n\n\t/** @type {Set<Query>} */\n\tstatic #inFlightQueries = new Set();\n\n\tstatic get queriesInFlight() {\n\t\treturn Query.#inFlightQueries.size > 0;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tstatic resetInFlightQueries() {\n\t\tQuery.#inFlightQueries = new Set();\n\t}\n\n\t/**\n\t * @param {Query<any>} q\n\t */\n\tstatic #markInFlight = (q) => {\n\t\tif (this.#inFlightQueries.size === 0) {\n\t\t\t// We are starting\n\t\t\tthis.#globalEmit('inFlightQueryStart', undefined);\n\t\t}\n\t\tQuery.#inFlightQueries.add(q);\n\t\tq.#sharedDataPromise.promise.finally(() => {\n\t\t\tQuery.#inFlightQueries.delete(q);\n\t\t\tif (this.#inFlightQueries.size === 0) {\n\t\t\t\t// We are done\n\t\t\t\tthis.#globalEmit('inFlightQueryEnd', undefined);\n\t\t\t}\n\t\t\t// Remove\n\t\t});\n\t};\n\n\t/** @type {import(\"../types.js\").EventMap<QueryGlobalEvents>} */\n\tstatic #globalHandlerMap = {\n\t\tinFlightQueryStart: new Set(),\n\t\tinFlightQueryEnd: new Set(),\n\t\tqueryCreated: new Set()\n\t};\n\t/**\n\t * @template {keyof QueryGlobalEvents} Event\n\t * @param {Event} event\n\t * @param {QueryGlobalEvents[Event]} value\n\t */\n\tstatic #globalEmit = (event, value) => {\n\t\tQuery.#globalHandlerMap[event].forEach((fn) => fn(value, event));\n\t};\n\n\t/** @type {QueryGlobalEventEmitter[\"addEventListener\"]} */\n\tstatic addEventListener(event, handler) {\n\t\tthis.#globalHandlerMap[event].add(handler);\n\t}\n\t/** @type {QueryGlobalEventEmitter[\"removeEventListener\"]} */\n\tstatic removeEventListener(event, handler) {\n\t\tthis.#globalHandlerMap[event].delete(handler);\n\t}\n\t/////////////////////////////\n\t/// </ Global Loading />  ///\n\t/////////////////////////////\n\n\t////////////////////\n\t/// < Fetching > ///\n\t////////////////////\n\n\tstatic #scoreThreshold = 10 * 1024 * 1024;\n\t/** @type { number } */\n\t#score = -1;\n\tget score() {\n\t\treturn this.#score;\n\t}\n\n\t#calculateScore = () => {\n\t\tif (this.lengthLoaded && this.columnsLoaded) {\n\t\t\tthis.#score = getQueryScore(this.length, this.columns);\n\t\t\tif (this.#score > Query.#scoreThreshold) {\n\t\t\t\tthis.#emit('highScore', this.#score);\n\t\t\t}\n\t\t} else {\n\t\t\tPromise.allSettled([this.#sharedLengthPromise.promise, this.#sharedColumnsPromise.promise])\n\t\t\t\t.then(([$lengthRaw, $columnsRaw]) => {\n\t\t\t\t\tif ($lengthRaw.status === 'rejected' || $columnsRaw.status === 'rejected') {\n\t\t\t\t\t\t// TODO: Throw here?\n\t\t\t\t\t\tthis.#score = -1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.#length || !this.#columns) {\n\t\t\t\t\t\t// TODO: Throw here?\n\t\t\t\t\t\tthis.#score = -1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.#score = getQueryScore(this.length, this.columns);\n\t\t\t\t\tif (this.#score > Query.#scoreThreshold) {\n\t\t\t\t\t\tthis.#emit('highScore', this.#score);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(`${this.id} | Failed to calculate Query score ${e}`);\n\t\t\t\t});\n\t\t}\n\t};\n\n\t/** @type {ChainableSharedPromise<RowType>} */\n\t#sharedDataPromise = sharedPromise(() =>\n\t\tthis.publish(`data promise (${this.#sharedDataPromise.state})`)\n\t);\n\t/** @returns {MaybePromise<Query<RowType>>} */\n\t#fetchData = () => {\n\t\tif (this.#sharedDataPromise.state !== 'init') {\n\t\t\treturn this.#sharedDataPromise.promise;\n\t\t}\n\t\tif (this.#error) {\n\t\t\tthis.#debug('data error', 'Refusing to execute data query, store has an error state');\n\t\t\treturn this.#sharedDataPromise.promise;\n\t\t}\n\t\tif (this.#sharedDataPromise.state !== 'init' || this.opts.noResolve)\n\t\t\treturn this.#sharedDataPromise.promise;\n\t\tthis.#sharedDataPromise.start();\n\n\t\tconst dataQuery =\n\t\t\t`\n---- Data ${this.#id} ${this.#hash}\n${this.text.trim()}\n        `.trim() + '\\n';\n\n\t\tthis.#debugStyled('data query text', '\\n' + dataQuery, 'font-family: monospace;');\n\n\t\t// gotta love jsdoc sometimes\n\t\tconst typedRunner = /** @type {import('../types.js').Runner<RowType>} */ (this.#executeQuery);\n\t\tQuery.#markInFlight(this);\n\t\tconst before = performance.now();\n\t\tconst resolved = resolveMaybePromise(\n\t\t\t(result, isPromise) => {\n\t\t\t\tthis.#data = result;\n\t\t\t\tconst after = performance.now();\n\n\t\t\t\tif (before - after > 5000) {\n\t\t\t\t\tthis.#emit('longRun', before - after);\n\t\t\t\t\tthis.#debug('long-running', `Query took ${before - after}ms to execute`);\n\t\t\t\t}\n\n\t\t\t\tthis.#dataQueryTime = after - before;\n\n\t\t\t\tthis.#sharedDataPromise.resolve(this);\n\t\t\t\tthis.#emit('dataReady', undefined);\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedDataPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => typedRunner(dataQuery, `${this.#id}_data`),\n\t\t\t(e, isPromise) => {\n\t\t\t\tthis.#error = e;\n\t\t\t\tthis.#sharedDataPromise.reject(e);\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedDataPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn resolved;\n\t};\n\tfetch = async () => {\n\t\treturn Promise.allSettled([this.#fetchColumns(), this.#fetchData(), this.#fetchLength()]).then(\n\t\t\t() => this.value\n\t\t);\n\t};\n\t/**\n\t * Executes the query without actually updating the state\n\t * This is helpful for ensuring that the related parquet files\n\t * are available, even when SSR is used to initially hydrate the\n\t * query / page.\n\t *\n\t * Does not run on the server, only in browser\n\t */\n\tbackgroundFetch = () => {\n\t\tif (typeof window === 'undefined') {\n\t\t\tthis.#debug('background fetch skip', 'Did not execute backgroundFetch in SSR');\n\t\t\treturn;\n\t\t}\n\t\tthis.#debug('background fetch', `Executed backgroundFetch`);\n\t\tresolveMaybePromise(\n\t\t\t() => {},\n\t\t\tasync () => {\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 0));\n\t\t\t\treturn this.#executeQuery(`--data\\n${this.text.trim()}`, this.id);\n\t\t\t},\n\t\t\t() => {}\n\t\t);\n\t};\n\n\t/** @type {ChainableSharedPromise<RowType>} */\n\t#sharedLengthPromise = sharedPromise(() =>\n\t\tthis.publish(`length promise (${this.#sharedLengthPromise.state})`)\n\t);\n\t/** @returns {MaybePromise<Query<RowType>>} */\n\t#fetchLength = () => {\n\t\t// If data has already been fetched, or provided\n\t\t// Don't query for the length again\n\t\tif (\n\t\t\tthis.#data &&\n\t\t\tthis.#sharedDataPromise.state === 'resolved' &&\n\t\t\tthis.#sharedLengthPromise.state === 'init'\n\t\t) {\n\t\t\tthis.#debug(\n\t\t\t\t'length inferred',\n\t\t\t\t'Inferred length from already-resolved data promise',\n\t\t\t\tthis.#data\n\t\t\t);\n\t\t\tthis.#length = this.#data.length;\n\t\t\t// Done\n\t\t\tthis.#sharedLengthPromise.resolve(this);\n\t\t\treturn this.#sharedLengthPromise.promise;\n\t\t}\n\t\tif (this.#error) {\n\t\t\tthis.#debug(\n\t\t\t\t'length error',\n\t\t\t\t'Refusing to execute length query, store has an error state',\n\t\t\t\tthis.#error\n\t\t\t);\n\t\t\tthis.#sharedLengthPromise.reject(this.#error); // Is this the right call?\n\t\t\treturn this.#sharedLengthPromise.value ?? this.#sharedLengthPromise.promise;\n\t\t}\n\t\tif (this.#sharedLengthPromise.state !== 'init' || this.opts.noResolve)\n\t\t\treturn this.#sharedLengthPromise.promise;\n\n\t\tthis.#sharedLengthPromise.start();\n\n\t\tconst lengthQuery =\n\t\t\t`\n---- Length ${this.#id} (${this.#hash})\nSELECT COUNT(*) as rowCount FROM (${this.text.trim()})\n        `.trim() + '\\n';\n\n\t\t// gotta love jsdoc sometimes\n\t\tconst typedRunner =\n\t\t\t/** @type {import('../types.js').Runner<{rowCount: number}>} */\n\t\t\t(this.#executeQuery);\n\n\t\tthis.#debugStyled('length query text', '\\n' + lengthQuery, 'font-family: monospace;');\n\t\tconst before = performance.now();\n\t\tconst resolved = resolveMaybePromise(\n\t\t\t/** @returns {MaybePromise<Query<RowType>>} */\n\t\t\t(lengthResult, isPromise) => {\n\t\t\t\tconst after = performance.now();\n\t\t\t\tthis.#lengthQueryTime = after - before;\n\t\t\t\tthis.#length = lengthResult[0].rowCount;\n\t\t\t\tthis.#sharedLengthPromise.resolve(this);\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedLengthPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => typedRunner(lengthQuery, `${this.#id}_length`),\n\t\t\t/** @returns {MaybePromise<Query<RowType>>} */\n\t\t\t(e, isPromise) => {\n\t\t\t\tthis.#error = e;\n\t\t\t\tthis.#sharedLengthPromise.reject(e);\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedLengthPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn /** @type {MaybePromise<Query<RowType>>} */ (resolved);\n\t};\n\n\t/** @type {ChainableSharedPromise<RowType>} */\n\t#sharedColumnsPromise = sharedPromise(() =>\n\t\tthis.publish(`columns promise (${this.#sharedColumnsPromise.state})`)\n\t);\n\t/** @returns {MaybePromise<Query<RowType>>} */\n\t#fetchColumns = () => {\n\t\tif (this.#error) {\n\t\t\tthis.#debug(\n\t\t\t\t'cols query error',\n\t\t\t\t'Refusing to execute columns query, store has an error state',\n\t\t\t\tthis.#error\n\t\t\t);\n\t\t\t// Return the value or the promise if not resolved\n\t\t\treturn this.#sharedColumnsPromise.value ?? this.#sharedColumnsPromise.promise;\n\t\t}\n\n\t\t// Store is in some started state\n\t\tif (this.#sharedColumnsPromise.state !== 'init' || this.opts.noResolve)\n\t\t\treturn this.#sharedColumnsPromise.promise;\n\t\t// Indicate that work has started on this promise\n\t\tthis.#sharedColumnsPromise.start();\n\n\t\tconst metaQuery =\n\t\t\t`\n---- Columns ${this.#id} (${this.#hash})\nDESCRIBE ${this.text.trim()}\n        `.trim() + '\\n';\n\n\t\tthis.#debugStyled('columns query text', '\\n' + metaQuery, 'font-family: monospace;');\n\n\t\t// gotta love jsdoc sometimes\n\t\tconst typedRunner =\n\t\t\t/** @type {import('../types.js').Runner<import('../../types/duckdb-wellknown.js').DescribeResultRow>} */\n\t\t\t(this.#executeQuery);\n\t\tconst before = performance.now();\n\t\tconst resolved = resolveMaybePromise(\n\t\t\t(description, isPromise) => {\n\t\t\t\tconst after = performance.now();\n\t\t\t\tthis.#columnsQueryTime = after - before;\n\t\t\t\t// Update inner value\n\t\t\t\tthis.#columns = description;\n\t\t\t\t// Resolve store\n\t\t\t\tthis.#sharedColumnsPromise.resolve(this);\n\n\t\t\t\tthis.#mockRow = /** @type {Record<keyof RowType, undefined>} */ (\n\t\t\t\t\tObject.fromEntries(description.map((d) => [d.column_name, undefined]))\n\t\t\t\t);\n\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedColumnsPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => typedRunner(metaQuery, `${this.#id}_columns`),\n\t\t\t/** @returns {MaybePromise<Query<RowType>>} */\n\t\t\t(e, isPromise) => {\n\t\t\t\tthis.#error = e;\n\t\t\t\tthis.#sharedColumnsPromise.reject(e);\n\n\t\t\t\tif (isPromise) {\n\t\t\t\t\treturn this.#sharedColumnsPromise.promise;\n\t\t\t\t} else {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn /** @type {MaybePromise<Query<RowType>>} */ (resolved);\n\t};\n\t//////////////////////\n\t/// </ Fetching /> ///\n\t//////////////////////\n\n\t//////////////////////////\n\t/// < Type Narrowing > ///\n\t//////////////////////////\n\t/**\n\t * @ignore\n\t * @private\n\t */\n\tget isQuery() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @template {QueryResultRow} RowType\n\t * @param {unknown} q\n\t * @returns {q is Query<RowType>}\n\t */\n\tstatic isQuery = (q) => {\n\t\t// TODO: Should we type-narrow on row type as well\n\t\t// Type narrow\n\t\tif (typeof q !== 'object' || !q) return false;\n\n\t\tconst hasDuckType = 'isQuery' in q && q['isQuery'] === true;\n\n\t\treturn hasDuckType;\n\t};\n\t////////////////////////////\n\t/// </ Type Narrowing /> ///\n\t////////////////////////////\n\n\t/** @param {unknown} v */\n\tstatic [Symbol.hasInstance](v) {\n\t\treturn Query.isQuery(v);\n\t}\n\n\t/////////////////\n\t/// < Proxy > ///\n\t/////////////////\n\t/** @type {string[]} */\n\tstatic get ProxyFetchTriggers() {\n\t\treturn ['at'];\n\t}\n\t/** @returns {QueryValue<RowType>} */\n\t#buildProxy = () => {\n\t\t/** @type {QueryValue<RowType>} */\n\t\tconst proxy = /** @type {QueryValue<RowType>} */ (\n\t\t\tnew Proxy(/** @type {RowType[]} */ ([]), {\n\t\t\t\tgetPrototypeOf: () => {\n\t\t\t\t\treturn Object.getPrototypeOf(this.#data);\n\t\t\t\t},\n\t\t\t\thas: (self, prop) => {\n\t\t\t\t\treturn prop in this.#data || prop in this;\n\t\t\t\t},\n\t\t\t\tget: (_self, rawProp) => {\n\t\t\t\t\t/** @type {string | symbol | number} */\n\t\t\t\t\tlet prop = rawProp;\n\n\t\t\t\t\tif (typeof prop === 'string' && /^[\\d.]+$/.exec(prop)) prop = parseInt(prop);\n\t\t\t\t\tif (typeof prop === 'number' || Query.ProxyFetchTriggers.includes(prop.toString())) {\n\t\t\t\t\t\tif (this.#sharedDataPromise.state === 'init') {\n\t\t\t\t\t\t\tthis.#debug('implicit fetch', `Implicit query fetch triggered by ${prop.toString()}`);\n\t\t\t\t\t\t\tthis.#fetchData(); // catches itself\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (prop === 'length') {\n\t\t\t\t\t\tthis.#fetchLength();\n\t\t\t\t\t}\n\t\t\t\t\tif (prop === 'constructor') return this.#data.constructor;\n\t\t\t\t\tif (prop === 'toString') return this.#data.toString.bind(this.#data);\n\n\t\t\t\t\t// Default field resolution\n\t\t\t\t\tconst target =\n\t\t\t\t\t\tprop in this\n\t\t\t\t\t\t\t? this // Prop exists on Query\n\t\t\t\t\t\t\t: this.#data && prop in this.#data\n\t\t\t\t\t\t\t\t? this.#data // Prop exists on Array\n\t\t\t\t\t\t\t\t: null; // Prop exists on neither\n\t\t\t\t\tif (target === null)\n\t\t\t\t\t\tif (typeof prop !== 'number') return undefined;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (prop > this.#length) return undefined;\n\t\t\t\t\t\t\treturn this.#mockRow ?? {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\tconst field = target[/** @type {keyof typeof target} */ (prop)];\n\n\t\t\t\t\tif (typeof field === 'function') return field.bind(target);\n\t\t\t\t\telse return field;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\treturn proxy;\n\t};\n\t///////////////////\n\t/// </ Proxy /> ///\n\t///////////////////\n\n\t/////////////////////\n\t/// < Factories > ///\n\t/////////////////////\n\t/**\n\t * This is a fairly arbitrary number that determines how much data\n\t * the Query will cache internally. The larger the number, the\n\t * larger the cache will be.\n\t *\n\t * The number is based on our Query Score calculation, see\n\t * queryScore.js for details on how this is calculated.\n\t *\n\t * @default 5 * 10 * 1024\n\t *\n\t */\n\tstatic CacheMaxScore = 5 * 10 * 1024;\n\t/**\n\t * @type {Map<string, {added: number, query: Query<any>}>}\n\t */\n\tstatic #cache = new Map();\n\n\tstatic emptyCache = () => {\n\t\tthis.#cache.clear();\n\t};\n\n\tstatic get cacheSize() {\n\t\treturn this.#cache.size;\n\t}\n\n\t/**\n\t * @param {Query<any>} q\n\t */\n\tstatic #addToCache = (q) => {\n\t\tthis.#cache.set(q.hash, {\n\t\t\tquery: q,\n\t\t\tadded: Date.now()\n\t\t});\n\n\t\tif (isDebug())\n\t\t\tconsole.debug(`Added to cache: ${q.hash}`, {\n\t\t\t\tcacheSize: this.#cache.size,\n\t\t\t\tcacheScore: Array.from(this.#cache.values()).reduce((sum, q) => sum + q.query.score, 0)\n\t\t\t});\n\t};\n\n\t/**\n\t * @template {QueryResultRow} [RowType=QueryResultRow]\n\t * @param {string} hash\n\t * @returns {Query<RowType> | null}\n\t */\n\tstatic #getFromCache = (hash) => {\n\t\tconst cachedValue = this.#cache.get(hash);\n\t\tif (cachedValue) {\n\t\t\treturn cachedValue.query;\n\t\t}\n\t\treturn null;\n\t};\n\n\tstatic #cacheCleanup = () => {\n\t\tlet sumScore = Array.from(this.#cache.values()).reduce((sum, q) => sum + q.query.score, 0);\n\t\tconst sorted = Array.from(this.#cache.values()).sort((a, b) => a.added - b.added);\n\t\twhile (sumScore > this.CacheMaxScore) {\n\t\t\tconst oldest = sorted.shift();\n\t\t\tif (!oldest) break;\n\t\t\tthis.#cache.delete(oldest.query.hash);\n\t\t\tsumScore -= oldest.query.score;\n\t\t}\n\t};\n\n\t/**\n\t *\n\t * @param {import('../types.js').QueryReactivityOpts<any>} reactiveOpts Callback that is executed when the new query is ready\n\t * @param {import('../types.js').QueryOpts<any>} [opts]\n\t * @param {QueryValue<any>} [initialQuery]\n\t */\n\tstatic createReactive = (reactiveOpts, opts, initialQuery) => {\n\t\tconst { loadGracePeriod = 250, callback = () => {}, execFn } = reactiveOpts;\n\n\t\t/** @type {import('../types.js').CreateQuery<any>} */\n\t\tconst createFn = Query.create;\n\t\t/** @type {QueryValue<any> | undefined} */\n\t\tlet activeQuery = initialQuery;\n\n\t\tlet changeIdx = 0;\n\t\t/** @type {() => unknown} */\n\t\tlet unsub;\n\t\tconst waitFor =\n\t\t\t/**\n\t\t\t * @param {string | Query} nextQuery\n\t\t\t * @param {import('../types.js').QueryOpts<any>} [newOpts]\n\t\t\t * @returns {Promise<void> | void}\n\t\t\t */\n\t\t\t(nextQuery, newOpts) => {\n\t\t\t\tif (!activeQuery) throw new Error();\n\t\t\t\tchangeIdx += 1;\n\t\t\t\tconst targetChangeIdx = changeIdx;\n\t\t\t\tQuery.#debugStatic(\n\t\t\t\t\t`${activeQuery.id} (${hashQuery(nextQuery)}) | Reactive Updating`,\n\t\t\t\t\tnextQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tchangeIdx,\n\t\t\t\t\t\ttargetChangeIdx,\n\t\t\t\t\t\thash: hashQuery(nextQuery)\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinitialOpts: opts,\n\t\t\t\t\t\tnewOpts: newOpts\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst newQuery = Query.isQuery(nextQuery)\n\t\t\t\t\t? nextQuery\n\t\t\t\t\t: createFn(\n\t\t\t\t\t\t\tnextQuery,\n\t\t\t\t\t\t\texecFn,\n\t\t\t\t\t\t\tObject.assign({}, opts, newOpts, { initialData: undefined, initialError: undefined })\n\t\t\t\t\t\t);\n\n\t\t\t\tconst fetched = newQuery.fetch();\n\t\t\t\tlet dataMaybePromise = fetched;\n\t\t\t\tif (fetched instanceof Promise) {\n\t\t\t\t\tdataMaybePromise = Promise.race([\n\t\t\t\t\t\tnew Promise((r) => setTimeout(r, loadGracePeriod)),\n\t\t\t\t\t\tnewQuery.fetch()\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\tresolveMaybePromise(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (changeIdx !== targetChangeIdx) {\n\t\t\t\t\t\t\tQuery.#debugStatic(`changeIdx does not match, results are discarded`);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunsub?.();\n\t\t\t\t\t\tactiveQuery = newQuery.value;\n\t\t\t\t\t\tunsub = activeQuery.subscribe(callback);\n\t\t\t\t\t},\n\t\t\t\t\tdataMaybePromise,\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tconsole.warn(`Error while attempting to update reactive query: ${e.message}`);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\n\t\tfunction removeInitialState() {\n\t\t\topts = { ...opts, initialData: undefined, initialError: undefined };\n\t\t}\n\n\t\t/**\n\t\t * @param {string} queryText\n\t\t * @param {import('../types.js').QueryOpts<any>} [newOpts]\n\t\t * @returns {void}\n\t\t */\n\t\treturn (queryText, newOpts) => {\n\t\t\tif (activeQuery) {\n\t\t\t\tresolveMaybePromise(\n\t\t\t\t\t() => {},\n\t\t\t\t\twaitFor(queryText, newOpts),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tconsole.warn(`Error while attempting to update reactive query: ${e.message}`);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (import.meta.hot?.data?.hmr) removeInitialState();\n\t\t\tactiveQuery = createFn(queryText, execFn, Object.assign({}, opts, newOpts));\n\n\t\t\tconst fetched = activeQuery.fetch();\n\t\t\tresolveMaybePromise(removeInitialState, fetched);\n\n\t\t\t// We don't want to use this after the initial creation!\n\t\t\tunsub = activeQuery.subscribe(callback);\n\t\t\tcallback(activeQuery);\n\t\t\treturn;\n\t\t};\n\t};\n\n\tstatic #devModeBootstrapped = false;\n\tstatic #devModeBootstraps = () => {\n\t\tif (!import.meta.hot || Query.#devModeBootstrapped) return;\n\t\tQuery.#devModeBootstrapped = true;\n\t\t// We need to do some dev mode pipeing\n\t\timport.meta.hot.data.hmr = false;\n\t\timport.meta.hot.on(VITE_EVENTS.RESET_QUERIES, () => {\n\t\t\tif (import.meta.hot) import.meta.hot.data.hmr = true;\n\t\t\tQuery.emptyCache();\n\t\t});\n\t};\n\n\t/**\n\t * @template {QueryResultRow} [RowType=QueryResultRow]\n\t * @type {import(\"../types.js\").CreateQuery<RowType>}\n\t */\n\tstatic create = (query, executeQuery, optsOrId, maybeOpts) => {\n\t\tif (import.meta.hot) {\n\t\t\tQuery.#devModeBootstraps();\n\t\t}\n\n\t\tconst queryHash = hashQuery(query);\n\t\t/** @type {import('../types.js').QueryOpts<RowType>} */\n\t\tlet opts;\n\t\tif (typeof optsOrId === 'string') {\n\t\t\topts = {\n\t\t\t\t...maybeOpts,\n\t\t\t\tid: optsOrId\n\t\t\t};\n\t\t} else if (optsOrId) {\n\t\t\topts = optsOrId;\n\t\t\tif (!opts.id) opts.id = queryHash + '-' + Math.random().toString(36).substring(0, 4);\n\t\t} else {\n\t\t\topts = {\n\t\t\t\tid: queryHash + '-' + Math.random().toString(36).substring(0, 4)\n\t\t\t};\n\t\t}\n\t\tif (!('autoScore' in opts)) {\n\t\t\topts.autoScore = true;\n\t\t}\n\n\t\tif (!opts.disableCache) {\n\t\t\t/** @type {Query<RowType> | null} */\n\t\t\tconst cached = Query.#getFromCache(queryHash);\n\n\t\t\tQuery.#cacheCleanup();\n\t\t\tif (cached) {\n\t\t\t\tQuery.#debugStatic(\n\t\t\t\t\t`${opts.id ?? '[query id missing]'} (${queryHash}) | Using cached query`,\n\t\t\t\t\t{ opts, hash: hashQuery(query) },\n\t\t\t\t\tquery,\n\t\t\t\t\tcached\n\t\t\t\t);\n\t\t\t\treturn cached.value;\n\t\t\t} else {\n\t\t\t\tQuery.#debugStatic(\n\t\t\t\t\t`${opts.id ?? '[query id missing]'} (${queryHash}) | Cached query not found`,\n\t\t\t\t\t{\n\t\t\t\t\t\topts,\n\t\t\t\t\t\thash: hashQuery(query)\n\t\t\t\t\t},\n\t\t\t\t\tquery\n\t\t\t\t);\n\t\t\t}\n\t\t} else\n\t\t\tQuery.#debugStatic(\n\t\t\t\t`${opts.id ?? '[query id missing]'} (${queryHash}) | cache disabled`,\n\t\t\t\t`Cache is disabled for ${opts.id ?? '[query id missing]'}`,\n\t\t\t\t{ opts, query, hash: hashQuery(query) }\n\t\t\t);\n\n\t\tQuery.#constructing = true;\n\t\tconst output = new Query(query, executeQuery, opts);\n\t\tQuery.#globalEmit('queryCreated', { raw: output, proxied: output.value });\n\t\tif (!opts.disableCache) {\n\t\t\tQuery.#addToCache(output);\n\t\t\tQuery.#cacheCleanup();\n\t\t}\n\t\treturn output.value;\n\t};\n\n\t///////////////////////\n\t/// </ Factories /> ///\n\t///////////////////////\n\n\tstatic #debugStatic = isDebug()\n\t\t? (/** @type { string } */ label, /** @type {Parameters<typeof console.debug>} */ ...args) => {\n\t\t\t\tconst groupName = `${(performance.now() / 1000).toFixed(3)} | Query | ${label}`;\n\t\t\t\tconsole.groupCollapsed(groupName);\n\t\t\t\tfor (const arg of args) {\n\t\t\t\t\tif (typeof arg === 'function') console.debug(arg());\n\t\t\t\t\telse console.debug(arg);\n\t\t\t\t}\n\t\t\t\tconsole.groupEnd();\n\t\t\t}\n\t\t: () => {};\n\tstatic #debugStyledStatic = isDebug()\n\t\t? (/** @type {string} */ label, /** @type {string} */ text, /** @type {string} */ style) => {\n\t\t\t\tconst groupName = `${(performance.now() / 1000).toFixed(3)} | Query | ${label}`;\n\t\t\t\tconsole.groupCollapsed(groupName);\n\t\t\t\tconsole.debug(`%c${text}`, style);\n\t\t\t\tconsole.groupEnd();\n\t\t\t}\n\t\t: () => {};\n\n\t#debug = isDebug()\n\t\t? (/** @type {string} */ label, /** @type {Parameters<typeof console.debug>} */ ...args) => {\n\t\t\t\tconst groupName = `${(performance.now() / 1000).toFixed(3)} | ${this.id} (${this.hash}) | ${label}`;\n\t\t\t\tconsole.groupCollapsed(groupName);\n\t\t\t\tfor (const arg of args) {\n\t\t\t\t\tif (typeof arg === 'function') console.debug(arg());\n\t\t\t\t\telse console.debug(arg);\n\t\t\t\t}\n\t\t\t\tconsole.groupEnd();\n\t\t\t}\n\t\t: () => {};\n\n\t#debugStyled = isDebug()\n\t\t? (/** @type {string} */ label, /** @type {string} */ text, /** @type {string} */ style) => {\n\t\t\t\tconst groupName = `${(performance.now() / 1000).toFixed(3)} | ${this.id} (${this.hash}) | ${label}`;\n\t\t\t\tconsole.groupCollapsed(groupName);\n\t\t\t\tconsole.debug(`%c${text}`, style);\n\t\t\t\tconsole.groupEnd();\n\t\t\t}\n\t\t: () => {};\n\n\tstatic #constructing = false;\n\n\t/** @type {string} */\n\t#id;\n\t/** @type {string} */\n\t#hash;\n\t/** @type {import('../types.js').QueryOpts<RowType>} */\n\t#opts;\n\n\t/** @type {Pick<import(\"../types.js\").QueryOpts<RowType>, 'autoScore' | 'noResolve' | 'disableCache'>} */\n\tget #inheritableOpts() {\n\t\treturn {\n\t\t\tautoScore: this.#opts.autoScore,\n\t\t\tnoResolve: this.#opts.noResolve,\n\t\t\tdisableCache: this.#opts.disableCache\n\t\t};\n\t}\n\n\t/** @type {string} */\n\tget id() {\n\t\treturn this.#id;\n\t}\n\t/** @type {string} */\n\tget hash() {\n\t\treturn this.#hash;\n\t}\n\n\t/** @type {import('../types.js').Runner} */\n\t#executeQuery;\n\n\t/** @type {import('../types.js').QueryOpts} */\n\topts;\n\n\t// TODO: Score (this should be done in another file)\n\t// TODO: When dealing with builder functions, add a `select` or similar\n\t/**\n\t * @param {QueryBuilder | string} query\n\t * @param {import('../types.js').Runner} executeQuery\n\t * @param {import(\"../types.js\").QueryOpts<RowType>} opts\n\t * @deprecated Use {@link Query.create} instead\n\t */\n\tconstructor(query, executeQuery, opts = {}) {\n\t\tconst {\n\t\t\tid,\n\t\t\tinitialData = undefined,\n\t\t\tknownColumns = undefined,\n\t\t\tinitialError = undefined\n\t\t} = opts;\n\t\tthis.opts = opts;\n\t\tthis.#executeQuery = executeQuery;\n\n\t\tif (typeof query !== 'string' && !(query instanceof QueryBuilder)) {\n\t\t\tconsole.warn(`Query ${id} has no query text`);\n\t\t\topts.noResolve = true;\n\t\t}\n\n\t\tif (!Query.#constructing) {\n\t\t\tconsole.warn(\n\t\t\t\t'Directly using new Query() is not a recommended use-case. Please use Query.create()'\n\t\t\t);\n\t\t}\n\t\tQuery.#constructing = false; // make sure we reset it\n\t\tthis.#value = this.#buildProxy();\n\t\tthis.#originalText = query?.toString() ?? \"SELECT 'Empty Query' WHERE 0\";\n\t\tthis.#hash = hashQuery(this.#originalText);\n\t\tthis.#id = id ?? this.#hash;\n\t\tthis.#opts = opts;\n\n\t\tif (query && typeof query !== 'string') this.#query = query;\n\t\telse if (query) {\n\t\t\tconst q = new QueryBuilder()\n\t\t\t\t.from({\n\t\t\t\t\t/* \n\t\t\t\t\t\tUse of nanoid prevent ambiguity when dealing with nested Queries; \n\t\t\t\t\t\tin theory this could be the querystring has but that's kinda gross \n\t\t\t\t\t*/\n\t\t\t\t\t[`inputQuery-${nanoid(2)}`]: taggedSql`(${sterilizeQuery(query)})`\n\t\t\t\t})\n\t\t\t\t.select('*');\n\t\t\tthis.#query = q;\n\t\t} else {\n\t\t\tthis.#query = new QueryBuilder();\n\t\t\tthis.#error = new Error(`Refusing to create Query: No Query Text provided`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (initialError) {\n\t\t\tthis.#error = initialError;\n\t\t\treturn;\n\t\t}\n\n\t\tif (opts.noResolve) {\n\t\t\tthis.#sharedDataPromise.start();\n\t\t\tthis.#sharedLengthPromise.start();\n\t\t\tthis.#sharedColumnsPromise.start();\n\t\t\treturn this;\n\t\t} else if (initialData) {\n\t\t\tthis.#debug('initial data', 'Created with initial data', initialData);\n\t\t\tthis.#hasInitialData = true;\n\n\t\t\tresolveMaybePromise(\n\t\t\t\t(d) => {\n\t\t\t\t\tthis.#data = d;\n\t\t\t\t\tif (opts.initialDataDirty) {\n\t\t\t\t\t\tthis.publish('dataDirty');\n\t\t\t\t\t\tthis.#fetchData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#sharedDataPromise.resolve(this);\n\t\t\t\t\t\tthis.#fetchLength();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinitialData,\n\t\t\t\t(e) => {\n\t\t\t\t\tthis.#error = e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (knownColumns) {\n\t\t\tif (!Array.isArray(knownColumns))\n\t\t\t\tthrow new Error(`Expected knownColumns to be an array`, { cause: knownColumns });\n\t\t\tthis.#columns = knownColumns;\n\t\t} else {\n\t\t\tresolveMaybePromise(\n\t\t\t\t() => {\n\t\t\t\t\t/* We don't need to do anything with the result */\n\t\t\t\t},\n\t\t\t\tthis.#fetchColumns(),\n\t\t\t\t(e, isPromise) => {\n\t\t\t\t\t/* Async errors are handled elsewhere */ if (!isPromise) throw e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tresolveMaybePromise(\n\t\t\t() => {\n\t\t\t\t/* We don't need to do anything with the result */\n\t\t\t},\n\t\t\tthis.#fetchLength(),\n\t\t\t(e, isPromise) => {\n\t\t\t\t/* Async errors are handled elsewhere */ if (!isPromise) throw e;\n\t\t\t}\n\t\t);\n\t\tif (opts.autoScore) {\n\t\t\tthis.#calculateScore();\n\t\t}\n\t}\n\n\t////////////////////////////////////\n\t/// < Implement Store Contract > ///\n\t////////////////////////////////////\n\t/** @type {Set<import('../types.js').Subscriber<QueryValue<RowType>>>} */\n\t#subscribers = new Set();\n\n\t/**\n\t * @param {import('../types.js').Subscriber<QueryValue<RowType>>} fn\n\t * @returns {() => void} Unsubscribe function\n\t */\n\tsubscribe = (fn) => {\n\t\tthis.#subscribers.add(fn);\n\t\tfn(this.#value);\n\t\treturn () => this.#subscribers.delete(fn);\n\t};\n\n\t#publishIdx = 0;\n\t/**\n\t * @protected\n\t */\n\tpublish = (/** @type {string} */ source) => {\n\t\tif (this.#publishIdx++ > 100000) throw new Error('Query published too many times.');\n\t\tthis.#debug('publish', `Publishing triggered by ${source}`, this);\n\t\tthis.#subscribers.forEach((fn) => fn(this.#value));\n\t};\n\t//////////////////////////////////////\n\t/// </ Implement Store Contract /> ///\n\t//////////////////////////////////////\n\n\t///////////////////////////////////////\n\t/// < EventEmitter Implementation > ///\n\t///////////////////////////////////////\n\t/** @type {import('../types.js').EventMap<QueryEvents>} */\n\t#handlerMap = {\n\t\tdataReady: new Set(),\n\t\terror: new Set(),\n\t\thighScore: new Set(),\n\t\tlongRun: new Set()\n\t};\n\n\t/**\n\t * @template {keyof QueryEvents} Event\n\t * @param {Event} event\n\t * @param {QueryEvents[Event]} value\n\t */\n\t#emit = (event, value) => {\n\t\tthis.#handlerMap[event].forEach((fn) => fn(value, event));\n\t};\n\n\t/**\n\t * @template {keyof QueryEvents} Event\n\t * @param {Event} event\n\t * @param {import('../types.js').EventHandler<QueryEvents, Event>} handler\n\t */\n\ton = (event, handler) => {\n\t\tthis.#handlerMap[event].add(handler);\n\t};\n\t/**\n\t * @template {keyof QueryEvents} Event\n\t * @param {Event} event\n\t * @param {import('../types.js').EventHandler<QueryEvents, Event>} handler\n\t */\n\toff = (event, handler) => {\n\t\tthis.#handlerMap[event].delete(handler);\n\t};\n\taddEventListener = this.on;\n\tremoveEventListener = this.off;\n\n\t/////////////////////////////////////////\n\t/// </ EventEmitter Implementation /> ///\n\t/////////////////////////////////////////\n\n\t//////////////////////////////////\n\t/// < QueryBuilder Interface > ///\n\t//////////////////////////////////\n\t/** @param {string} filterStatement */\n\twhere = (filterStatement) =>\n\t\tQuery.create(this.#query.clone().where(taggedSql`${filterStatement}`), this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\tnoResolve: this.#opts.noResolve\n\t\t});\n\n\t/**\n\t * Attaches an `ordinal` column to the query based on some window statement\n\t * @example myQuery.withOrdinal('partition by a order by b')\n\t * @param {string} windowStatement\n\t * @returns\n\t */\n\twithOrdinal = (windowStatement) => {\n\t\tconst newQ = this.#query.clone();\n\t\tnewQ.select({\n\t\t\tordinal: taggedSql`row_number() over (${windowStatement})`\n\t\t});\n\t\treturn Query.create(newQ, this.#executeQuery, {\n\t\t\t...this.#inheritableOpts,\n\t\t\tknownColumns: this.#columns\n\t\t});\n\t};\n\n\t/**\n\t * @param {string} searchTerm\n\t * @param {string | string[]} searchCol\n\t * @param {number} searchThreshold\n\t * @returns {QueryValue<RowType & {similarity: number}>}\n\t */\n\tsearch = (searchTerm, searchCol, searchThreshold = 0.5) => {\n\t\t/** @type {import('../../types/duckdb-wellknown.js').DescribeResultRow[]} */\n\t\tconst colsWithSimilarity = [\n\t\t\t...this.#columns,\n\t\t\t{ column_name: 'similarity', column_type: 'INTEGER', nullable: 'NO' }\n\t\t];\n\n\t\t/** @type {import('../types.js').CreateQuery<any>} */\n\t\tconst typedCreateFn = Query.create;\n\n\t\tconst escapedSearchTerm = searchTerm.replaceAll(\"'\", \"''\");\n\n\t\tconst cols = Array.isArray(searchCol) ? searchCol : [searchCol];\n\t\tconst statements = cols\n\t\t\t.map((col) => {\n\t\t\t\tconst exactMatch = taggedSql`CASE WHEN lower(\"${col.trim()}\") = lower('${escapedSearchTerm}') THEN 2 ELSE 0 END`;\n\t\t\t\tconst similarity = taggedSql`jaccard(lower('${escapedSearchTerm}'), lower(\"${col}\"))`;\n\t\t\t\tconst exactSubMatch =\n\t\t\t\t\t// escapedSearchTerm.length >= 4\n\t\t\t\t\ttaggedSql`CASE WHEN lower(\"${col.trim()}\") LIKE lower('%${escapedSearchTerm.split(' ').join('%')}%') THEN 1 ELSE 0 END`;\n\t\t\t\t// : taggedSql`0`;\n\t\t\t\treturn taggedSql`GREATEST((${exactMatch}), (${similarity}), (${exactSubMatch}))`;\n\t\t\t})\n\t\t\t.join(',');\n\n\t\t/** @type {QueryValue<RowType & {similarity: number}>} */\n\t\tconst output = typedCreateFn(\n\t\t\tthis.#query\n\t\t\t\t.clone()\n\t\t\t\t.$select(\n\t\t\t\t\t{\n\t\t\t\t\t\tsimilarity: taggedSql`GREATEST(${statements})`\n\t\t\t\t\t},\n\t\t\t\t\t'*'\n\t\t\t\t)\n\t\t\t\t.where(taggedSql`\"similarity\" > ${searchThreshold} `)\n\t\t\t\t.orderby(taggedSql`\"similarity\" DESC`),\n\t\t\tthis.#executeQuery,\n\t\t\t{\n\t\t\t\tknownColumns: colsWithSimilarity,\n\t\t\t\t...this.#inheritableOpts\n\t\t\t}\n\t\t);\n\t\treturn output;\n\t};\n\n\t/** @param {number} limit */\n\tlimit = (limit) =>\n\t\tQuery.create(this.#query.clone().limit(limit), this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\t...this.#inheritableOpts\n\t\t});\n\n\t/** @param {number} offset */\n\toffset = (offset) =>\n\t\tQuery.create(this.#query.clone().offset(offset), this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\t...this.#inheritableOpts\n\t\t});\n\t/**\n\t * @param {number} offset\n\t * @param {number} limit\n\t */\n\tpaginate = (offset, limit) =>\n\t\tQuery.create(this.#query.clone().offset(offset).limit(limit), this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\t...this.#inheritableOpts\n\t\t});\n\n\t/**\n\t * @param {string[]} columns\n\t * @param {boolean} [withRowCount=true]\n\t */\n\tgroupBy = (columns, withRowCount) => {\n\t\tconst query = this.#query.clone();\n\t\tquery.$select(columns);\n\t\tif (withRowCount) query.select({ rows: qCount('*') });\n\t\tquery.$groupby(columns);\n\n\t\treturn Query.create(query, this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\t...this.#inheritableOpts\n\t\t});\n\t};\n\n\t/**\n\t * @typedef {Object} AggArgs\n\t * @property {import(\"../types.js\").MaybeAliasedCol | import(\"../types.js\").MaybeAliasedCol[]} sum\n\t * @property {import(\"../types.js\").MaybeAliasedCol | import(\"../types.js\").MaybeAliasedCol[]} avg\n\t * @property {import(\"../types.js\").MaybeAliasedCol | import(\"../types.js\").MaybeAliasedCol[]} min\n\t * @property {import(\"../types.js\").MaybeAliasedCol | import(\"../types.js\").MaybeAliasedCol[]} max\n\t * @property {import(\"../types.js\").MaybeAliasedCol | import(\"../types.js\").MaybeAliasedCol[]} median\n\t */\n\n\t/**\n\t * @type {Record<keyof AggArgs, CallableFunction>}\n\t */\n\tstatic #aggFns = {\n\t\tsum: qSum,\n\t\tavg: qAvg,\n\t\tmin: qMin,\n\t\tmax: qMax,\n\t\tmedian: qMedian\n\t};\n\t/**\n\t *\n\t * @param {string} aggKey\n\t * @returns {aggKey is keyof AggArgs}\n\t */\n\tstatic #checkAggFn = (aggKey) => {\n\t\treturn aggKey in Query.#aggFns;\n\t};\n\t/**\n\t * @param {AggArgs} cfg\n\t */\n\tagg = (cfg) => {\n\t\tconst query = this.#query.clone();\n\t\tfor (const [aggType, aggArgs] of Object.entries(cfg)) {\n\t\t\tif (!Query.#checkAggFn(aggType)) throw new Error(`Unknown agg function: ${aggType}`);\n\t\t\tconst aggFn = Query.#aggFns[aggType];\n\t\t\tconst argsArray = Array.isArray(aggArgs) ? aggArgs : [aggArgs];\n\t\t\tfor (const colSpec of argsArray) {\n\t\t\t\tconst alias = typeof colSpec === 'object' ? colSpec.as : `${aggType}_${colSpec}`;\n\t\t\t\tconst column = typeof colSpec === 'object' ? colSpec.col : colSpec;\n\t\t\t\tquery.select({\n\t\t\t\t\t[alias]: aggFn(column)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Query.create(query, this.#executeQuery, {\n\t\t\tknownColumns: this.#columns,\n\t\t\t...this.#inheritableOpts\n\t\t});\n\t};\n\n\t////////////////////////////////////\n\t/// </ QueryBuilder Interface /> ///\n\t////////////////////////////////////\n}\n\n/**\n * @param  {...any} args\n * @returns {string}\n */\nexport const hashQuery = (...args) => {\n\t/**\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tconst simpleHash = (str) => {\n\t\tlet hash = 0;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tconst char = str.charCodeAt(i);\n\t\t\thash = (hash << 5) - hash + char;\n\t\t\thash &= hash; // Convert to 32bit integer\n\t\t}\n\t\treturn new Uint32Array([hash])[0].toString(36);\n\t};\n\treturn simpleHash(JSON.stringify(args));\n};\n", "/**\n * @typedef {Object} DuckdbSerializeOpts\n * @property {boolean} [serializeStrings=true]\n */\n/**\n * Serializes a value into a format suitable for use in a DuckDB query.\n *\n * @param {any} value - The value to be serialized.\n * @return {string} The serialized value.\n */\nexport const duckdbSerialize = (value, opts = { serializeStrings: true }) => {\n\tif (value == null) return 'null';\n\n\tif (typeof value === 'string') {\n\t\tif (opts.serializeStrings !== false) return `'${value.replaceAll(\"'\", \"''\")}'`;\n\t\telse {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tif (typeof value === 'number' || typeof value === 'bigint' || typeof value === 'boolean')\n\t\treturn String(value);\n\n\tif (value instanceof Date) return `'${value.toISOString()}'::TIMESTAMP_MS`;\n\n\tif (Array.isArray(value)) return `[${value.map((x) => duckdbSerialize(x, opts)).join(', ')}]`;\n\n\treturn JSON.stringify(value);\n};\n", "export const Unset = Symbol('Unset');\nexport const IsSetTracked = Symbol('IsSetTracked');\nconst GetModKeys = Symbol('GetModKeys');\n\nexport const setTrackProxy = (\n\t/** @type {Record<string|number|symbol,string>} */ defaultStringMap = {},\n\t/** @type {any} */ root = {},\n\t/** @type {any|undefined} */ parent = undefined,\n\t/** @type {string|number|symbol|undefined} */ ownKey = undefined\n) => {\n\tif (parent && !parent[IsSetTracked]) throw new Error(`SetTracked parent must be SetTracked`);\n\n\tconst wrapped = Object.assign(() => {}, root ?? {});\n\n\t/** @type {Array<string|number|symbol>} */\n\tconst modifiedKeys = Object.keys(wrapped);\n\tconst self = new Proxy(wrapped, {\n\t\tget(target, prop) {\n\t\t\tswitch (prop) {\n\t\t\t\tcase Unset:\n\t\t\t\t\treturn !parent?.[GetModKeys].includes(ownKey);\n\t\t\t\tcase GetModKeys:\n\t\t\t\t\treturn modifiedKeys;\n\t\t\t\tcase IsSetTracked:\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'toJSON':\n\t\t\t\t\treturn () => ({ ...target });\n\t\t\t\tcase 'toString':\n\t\t\t\tcase 'toPrimitive':\n\t\t\t\tcase Symbol.toPrimitive:\n\t\t\t\t\tif (self[Unset]) {\n\t\t\t\t\t\tif (ownKey && ownKey in defaultStringMap) return () => defaultStringMap[ownKey];\n\t\t\t\t\t\treturn () => ``;\n\t\t\t\t\t} else return root.toString.bind(root);\n\t\t\t\tdefault:\n\t\t\t\t\tif (!(prop in target)) {\n\t\t\t\t\t\ttarget[prop] = setTrackProxy(defaultStringMap, undefined, self, prop);\n\t\t\t\t\t}\n\t\t\t\t\treturn target[prop];\n\t\t\t}\n\t\t},\n\t\tset(target, prop, value) {\n\t\t\tmodifiedKeys.push(prop);\n\t\t\tif (typeof value === 'object') {\n\t\t\t\tvalue = setTrackProxy(defaultStringMap, value, self, prop);\n\t\t\t}\n\t\t\ttarget[prop] = value;\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn self;\n};\n\n/**\n * @param {TemplateStringsArray} strings\n * @param  {...any} args\n * @returns {boolean}\n */\nexport const hasUnsetValues = (strings, ...args) => {\n\treturn args.some((arg) => arg?.[Unset]);\n};\n"],
  "mappings": "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",
  "names": ["column", "length", "cast", "isDistinct", "_Query", "query", "window", "sql", "from", "v", "length", "column", "_a", "sum", "q", "Query"]
}
